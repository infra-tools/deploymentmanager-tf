type_info:
  documentationLink: https://cloud.google.com/cloud-build/docs/
  kind: deploymentmanager#typeInfo
  name: projects.triggers
  schema:
    input:
      $schema: http://json-schema.org/draft-03/schema#
      create:
        properties:
          build:
            $ref: '#/schemas/Build'
            description: Contents of the build template.
          description:
            description: Human-readable description of this trigger.
            type: string
          disabled:
            description: If true, the trigger will never result in a build.
            type: boolean
          filename:
            description: |-
              Path, from the source root, to a file whose contents is used for the
              template.
            type: string
          github:
            $ref: '#/schemas/GitHubEventsConfig'
            description: |-
              GitHubEventsConfig describes the configuration of a trigger that creates
              a build whenever a GitHub event is received.
          ignoredFiles:
            description: |-
              ignored_files and included_files are file glob matches using
              http://godoc/pkg/path/filepath#Match extended with support for "**".

              If ignored_files and changed files are both empty, then they are
              not used to determine whether or not to trigger a build.

              If ignored_files is not empty, then we ignore any files that match
              any of the ignored_file globs. If the change has no files that are
              outside of the ignored_files globs, then we do not trigger a build.
            items:
              type: string
            type: array
          includedFiles:
            description: |-
              If any of the files altered in the commit pass the ignored_files
              filter and included_files is empty, then as far as this filter is
              concerned, we should trigger the build.

              If any of the files altered in the commit pass the ignored_files
              filter and included_files is not empty, then we make sure that at
              least one of those files matches a included_files glob. If not,
              then we do not trigger a build.
            items:
              type: string
            type: array
          substitutions:
            additionalProperties:
              type: string
            description: Substitutions data for Build resource.
            type: object
          tags:
            description: Tags for annotation of a `BuildTrigger`
            items:
              type: string
            type: array
          triggerTemplate:
            $ref: '#/schemas/RepoSource'
            description: |-
              Template describing the types of source changes to trigger a build.

              Branch and tag names in trigger templates are interpreted as regular
              expressions. Any branch or tag change that matches that regular expression
              will trigger a build.
        type: object
      methodName: create
      schemas:
        ArtifactObjects:
          description: |-
            Files in the workspace to upload to Cloud Storage upon successful
            completion of all build steps.
          id: ArtifactObjects
          properties:
            location:
              description: |-
                Cloud Storage bucket and optional object path, in the form
                "gs://bucket/path/to/somewhere/". (see [Bucket Name
                Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).

                Files in the workspace matching any path pattern will be uploaded to
                Cloud Storage with this location as a prefix.
              type: string
            paths:
              description: Path globs used to match files in the build's workspace.
              items:
                type: string
              type: array
          type: object
        Artifacts:
          description: |-
            Artifacts produced by a build that should be uploaded upon
            successful completion of all build steps.
          id: Artifacts
          properties:
            images:
              description: |-
                A list of images to be pushed upon the successful completion of all build
                steps.

                The images will be pushed using the builder service account's credentials.

                The digests of the pushed images will be stored in the Build resource's
                results field.

                If any of the images fail to be pushed, the build is marked FAILURE.
              items:
                type: string
              type: array
            objects:
              $ref: '#/schemas/ArtifactObjects'
              description: |-
                A list of objects to be uploaded to Cloud Storage upon successful
                completion of all build steps.

                Files in the workspace matching specified paths globs will be uploaded to
                the specified Cloud Storage location using the builder service account's
                credentials.

                The location and generation of the uploaded objects will be stored in the
                Build resource's results field.

                If any objects fail to be pushed, the build is marked FAILURE.
          type: object
        Build:
          description: |-
            A build resource in the Cloud Build API.

            At a high level, a `Build` describes where to find source code, how to build
            it (for example, the builder image to run on the source), and where to store
            the built artifacts.

            Fields can include the following variables, which will be expanded when the
            build is created:

            - $PROJECT_ID: the project ID of the build.
            - $BUILD_ID: the autogenerated ID of the build.
            - $REPO_NAME: the source repository name specified by RepoSource.
            - $BRANCH_NAME: the branch name specified by RepoSource.
            - $TAG_NAME: the tag name specified by RepoSource.
            - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or
              resolved from the specified branch or tag.
            - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
          id: Build
          properties:
            artifacts:
              $ref: '#/schemas/Artifacts'
              description: |-
                Artifacts produced by the build that should be uploaded upon
                successful completion of all build steps.
            buildTriggerId:
              description: |-
                Output only. The ID of the `BuildTrigger` that triggered this build, if it
                was triggered automatically.
              type: string
            finishTime:
              description: |-
                Output only. Time at which execution of the build was finished.

                The difference between finish_time and start_time is the duration of the
                build's execution.
              format: google-datetime
              type: string
            images:
              description: |-
                A list of images to be pushed upon the successful completion of all build
                steps.

                The images are pushed using the builder service account's credentials.

                The digests of the pushed images will be stored in the `Build` resource's
                results field.

                If any of the images fail to be pushed, the build status is marked
                `FAILURE`.
              items:
                type: string
              type: array
            logsBucket:
              description: |-
                Google Cloud Storage bucket where logs should be written (see
                [Bucket Name
                Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
                Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
              type: string
            options:
              $ref: '#/schemas/BuildOptions'
              description: Special options for this build.
            secrets:
              description: Secrets to decrypt using Cloud Key Management Service.
              items:
                $ref: '#/schemas/Secret'
              type: array
            source:
              $ref: '#/schemas/Source'
              description: The location of the source files to build.
            steps:
              description: Required. The operations to be performed on the workspace.
              items:
                $ref: '#/schemas/BuildStep'
              type: array
            substitutions:
              additionalProperties:
                type: string
              description: Substitutions data for `Build` resource.
              type: object
            tags:
              description: Tags for annotation of a `Build`. These are not docker
                tags.
              items:
                type: string
              type: array
            timeout:
              description: |-
                Amount of time that this build should be allowed to run, to second
                granularity. If this amount of time elapses, work on the build will cease
                and the build status will be `TIMEOUT`.

                Default time is ten minutes.
              format: google-duration
              type: string
            timing:
              additionalProperties:
                $ref: '#/schemas/TimeSpan'
              description: |-
                Output only. Stores timing information for phases of the build. Valid keys
                are:

                * BUILD: time to execute all build steps
                * PUSH: time to push all specified images.
                * FETCHSOURCE: time to fetch source.

                If the build does not specify source or images,
                these keys will not be included.
              type: object
          type: object
        BuildOptions:
          description: Optional arguments to enable specific features of builds.
          id: BuildOptions
          properties:
            diskSizeGb:
              description: |-
                Requested disk size for the VM that runs the build. Note that this is *NOT*
                "disk free"; some of the space will be used by the operating system and
                build utilities. Also note that this is the minimum disk size that will be
                allocated for the build -- the build may run with a larger disk than
                requested. At present, the maximum disk size is 1000GB; builds that request
                more than the maximum are rejected with an error.
              format: int64
              type: string
            env:
              description: |-
                A list of global environment variable definitions that will exist for all
                build steps in this build. If a variable is defined in both globally and in
                a build step, the variable will use the build step value.

                The elements are of the form "KEY=VALUE" for the environment variable "KEY"
                being given the value "VALUE".
              items:
                type: string
              type: array
            logStreamingOption:
              description: |-
                Option to define build log streaming behavior to Google Cloud
                Storage.
              enum:
              - STREAM_DEFAULT
              - STREAM_ON
              - STREAM_OFF
              enumDescriptions:
              - Service may automatically determine build log streaming behavior.
              - Build logs should be streamed to Google Cloud Storage.
              - |-
                Build logs should not be streamed to Google Cloud Storage; they will be
                written when the build is completed.
              type: string
            logging:
              description: |-
                Option to specify the logging mode, which determines where the logs are
                stored.
              enum:
              - LOGGING_UNSPECIFIED
              - LEGACY
              - GCS_ONLY
              enumDescriptions:
              - |-
                The service determines the logging mode. The default is `LEGACY`. Do not
                rely on the default logging behavior as it may change in the future.
              - Stackdriver logging and Cloud Storage logging are enabled.
              - Only Cloud Storage logging is enabled.
              type: string
            machineType:
              description: Compute Engine machine type on which to run the build.
              enum:
              - UNSPECIFIED
              - N1_HIGHCPU_8
              - N1_HIGHCPU_32
              enumDescriptions:
              - Standard machine type.
              - Highcpu machine with 8 CPUs.
              - Highcpu machine with 32 CPUs.
              type: string
            requestedVerifyOption:
              description: Requested verifiability options.
              enum:
              - NOT_VERIFIED
              - VERIFIED
              enumDescriptions:
              - Not a verifiable build. (default)
              - Verified build.
              type: string
            secretEnv:
              description: |-
                A list of global environment variables, which are encrypted using a Cloud
                Key Management Service crypto key. These values must be specified in the
                build's `Secret`. These variables will be available to all build steps
                in this build.
              items:
                type: string
              type: array
            sourceProvenanceHash:
              description: Requested hash for SourceProvenance.
              enumDescriptions:
              - No hash requested.
              - Use a sha256 hash.
              - Use a md5 hash.
              items:
                enum:
                - NONE
                - SHA256
                - MD5
                type: string
              type: array
            substitutionOption:
              description: |-
                Option to specify behavior when there is an error in the substitution
                checks.
              enum:
              - MUST_MATCH
              - ALLOW_LOOSE
              enumDescriptions:
              - |-
                Fails the build if error in substitutions checks, like missing
                a substitution in the template or in the map.
              - Do not fail the build if error in substitutions checks.
              type: string
            volumes:
              description: |-
                Global list of volumes to mount for ALL build steps

                Each volume is created as an empty volume prior to starting the build
                process. Upon completion of the build, volumes and their contents are
                discarded. Global volume names and paths cannot conflict with the volumes
                defined a build step.

                Using a global volume in a build with only one step is not valid as
                it is indicative of a build request with an incorrect configuration.
              items:
                $ref: '#/schemas/Volume'
              type: array
            workerPool:
              description: |-
                Option to specify a `WorkerPool` for the build. User specifies the pool
                with the format "[WORKERPOOL_PROJECT_ID]/[WORKERPOOL_NAME]".
                This is an experimental field.
              type: string
          type: object
        BuildStep:
          description: A step in the build pipeline.
          id: BuildStep
          properties:
            args:
              description: |-
                A list of arguments that will be presented to the step when it is started.

                If the image used to run the step's container has an entrypoint, the `args`
                are used as arguments to that entrypoint. If the image does not define
                an entrypoint, the first element in args is used as the entrypoint,
                and the remainder will be used as arguments.
              items:
                type: string
              type: array
            dir:
              description: |-
                Working directory to use when running this step's container.

                If this value is a relative path, it is relative to the build's working
                directory. If this value is absolute, it may be outside the build's working
                directory, in which case the contents of the path may not be persisted
                across build step executions, unless a `volume` for that path is specified.

                If the build specifies a `RepoSource` with `dir` and a step with a `dir`,
                which specifies an absolute path, the `RepoSource` `dir` is ignored for
                the step's execution.
              type: string
            entrypoint:
              description: |-
                Entrypoint to be used instead of the build step image's default entrypoint.
                If unset, the image's default entrypoint is used.
              type: string
            env:
              description: |-
                A list of environment variable definitions to be used when running a step.

                The elements are of the form "KEY=VALUE" for the environment variable "KEY"
                being given the value "VALUE".
              items:
                type: string
              type: array
            id:
              description: |-
                Unique identifier for this build step, used in `wait_for` to
                reference this build step as a dependency.
              type: string
            name:
              description: |-
                Required. The name of the container image that will run this particular
                build step.

                If the image is available in the host's Docker daemon's cache, it
                will be run directly. If not, the host will attempt to pull the image
                first, using the builder service account's credentials if necessary.

                The Docker daemon's cache will already have the latest versions of all of
                the officially supported build steps
                ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).
                The Docker daemon will also have cached many of the layers for some popular
                images, like "ubuntu", "debian", but they will be refreshed at the time you
                attempt to use them.

                If you built an image in a previous build step, it will be stored in the
                host's Docker daemon's cache and is available to use as the name for a
                later build step.
              type: string
            pullTiming:
              $ref: '#/schemas/TimeSpan'
              description: |-
                Output only. Stores timing information for pulling this build step's
                builder image only.
            secretEnv:
              description: |-
                A list of environment variables which are encrypted using a Cloud Key
                Management Service crypto key. These values must be specified in the
                build's `Secret`.
              items:
                type: string
              type: array
            status:
              description: |-
                Output only. Status of the build step. At this time, build step status is
                only updated on build completion; step status is not updated in real-time
                as the build progresses.
              enum:
              - STATUS_UNKNOWN
              - QUEUED
              - WORKING
              - SUCCESS
              - FAILURE
              - INTERNAL_ERROR
              - TIMEOUT
              - CANCELLED
              enumDescriptions:
              - Status of the build is unknown.
              - Build or step is queued; work has not yet begun.
              - Build or step is being executed.
              - Build or step finished successfully.
              - Build or step failed to complete successfully.
              - Build or step failed due to an internal cause.
              - Build or step took longer than was allowed.
              - Build or step was canceled by a user.
              type: string
            timeout:
              description: |-
                Time limit for executing this build step. If not defined, the step has no
                time limit and will be allowed to continue to run until either it completes
                or the build itself times out.
              format: google-duration
              type: string
            volumes:
              description: |-
                List of volumes to mount into the build step.

                Each volume is created as an empty volume prior to execution of the
                build step. Upon completion of the build, volumes and their contents are
                discarded.

                Using a named volume in only one step is not valid as it is indicative
                of a build request with an incorrect configuration.
              items:
                $ref: '#/schemas/Volume'
              type: array
            waitFor:
              description: |-
                The ID(s) of the step(s) that this build step depends on.
                This build step will not start until all the build steps in `wait_for`
                have completed successfully. If `wait_for` is empty, this build step will
                start when all previous build steps in the `Build.Steps` list have
                completed successfully.
              items:
                type: string
              type: array
          type: object
        BuildTrigger:
          description: |-
            Configuration for an automated build in response to source repository
            changes.
          id: BuildTrigger
          properties:
            build:
              $ref: '#/schemas/Build'
              description: Contents of the build template.
            description:
              description: Human-readable description of this trigger.
              type: string
            disabled:
              description: If true, the trigger will never result in a build.
              type: boolean
            filename:
              description: |-
                Path, from the source root, to a file whose contents is used for the
                template.
              type: string
            github:
              $ref: '#/schemas/GitHubEventsConfig'
              description: |-
                GitHubEventsConfig describes the configuration of a trigger that creates
                a build whenever a GitHub event is received.
            ignoredFiles:
              description: |-
                ignored_files and included_files are file glob matches using
                http://godoc/pkg/path/filepath#Match extended with support for "**".

                If ignored_files and changed files are both empty, then they are
                not used to determine whether or not to trigger a build.

                If ignored_files is not empty, then we ignore any files that match
                any of the ignored_file globs. If the change has no files that are
                outside of the ignored_files globs, then we do not trigger a build.
              items:
                type: string
              type: array
            includedFiles:
              description: |-
                If any of the files altered in the commit pass the ignored_files
                filter and included_files is empty, then as far as this filter is
                concerned, we should trigger the build.

                If any of the files altered in the commit pass the ignored_files
                filter and included_files is not empty, then we make sure that at
                least one of those files matches a included_files glob. If not,
                then we do not trigger a build.
              items:
                type: string
              type: array
            substitutions:
              additionalProperties:
                type: string
              description: Substitutions data for Build resource.
              type: object
            tags:
              description: Tags for annotation of a `BuildTrigger`
              items:
                type: string
              type: array
            triggerTemplate:
              $ref: '#/schemas/RepoSource'
              description: |-
                Template describing the types of source changes to trigger a build.

                Branch and tag names in trigger templates are interpreted as regular
                expressions. Any branch or tag change that matches that regular expression
                will trigger a build.
          type: object
        BuiltImage:
          description: An image built by the pipeline.
          id: BuiltImage
          properties:
            digest:
              description: Docker Registry 2.0 digest.
              type: string
            name:
              description: |-
                Name used to push the container image to Google Container Registry, as
                presented to `docker push`.
              type: string
          type: object
        FileHashes:
          description: |-
            Container message for hashes of byte content of files, used in
            SourceProvenance messages to verify integrity of source input to the build.
          id: FileHashes
          properties:
            fileHash:
              description: Collection of file hashes.
              items:
                $ref: '#/schemas/Hash'
              type: array
          type: object
        GitHubEventsConfig:
          description: |-
            GitHubEventsConfig describes the configuration of a trigger that creates a
            build whenever a GitHub event is received.

            This message is experimental.
          id: GitHubEventsConfig
          properties:
            installationId:
              description: The installationID that emits the GitHub event.
              format: int64
              type: string
            name:
              description: |-
                Name of the repository. For example: The name for
                https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
              type: string
            owner:
              description: |-
                Owner of the repository. For example: The owner for
                https://github.com/googlecloudplatform/cloud-builders is
                "googlecloudplatform".
              type: string
            pullRequest:
              $ref: '#/schemas/PullRequestFilter'
              description: filter to match changes in pull requests.
            push:
              $ref: '#/schemas/PushFilter'
              description: filter to match changes in refs like branches, tags.
          type: object
        Hash:
          description: Container message for hash values.
          id: Hash
          properties:
            type:
              description: The type of hash that was performed.
              enum:
              - NONE
              - SHA256
              - MD5
              enumDescriptions:
              - No hash requested.
              - Use a sha256 hash.
              - Use a md5 hash.
              type: string
            value:
              description: The hash value.
              format: byte
              type: string
          type: object
        PullRequestFilter:
          description: |-
            PullRequestFilter contains filter properties for matching GitHub Pull
            Requests.
          id: PullRequestFilter
          properties:
            branch:
              description: |-
                Regex of branches to match.

                The syntax of the regular expressions accepted is the syntax accepted by
                RE2 and described at https://github.com/google/re2/wiki/Syntax
              type: string
            commentControl:
              description: |-
                Whether to block builds on a "/gcbrun" comment from a repository owner or
                collaborator.
              enum:
              - COMMENTS_DISABLED
              - COMMENTS_ENABLED
              enumDescriptions:
              - Do not require comments on Pull Requests before builds are triggered.
              - |-
                Enforce that repository owners or collaborators must comment on Pull
                Requests before builds are triggered.
              type: string
          type: object
        PushFilter:
          description: Push contains filter properties for matching GitHub git pushes.
          id: PushFilter
          properties:
            branch:
              description: |-
                Regexes of branches to match.

                The syntax of the regular expressions accepted is the syntax accepted by
                RE2 and described at https://github.com/google/re2/wiki/Syntax
              type: string
            tag:
              description: |-
                Regexes of tags to match.

                The syntax of the regular expressions accepted is the syntax accepted by
                RE2 and described at https://github.com/google/re2/wiki/Syntax
              type: string
          type: object
        RepoSource:
          description: Location of the source in a Google Cloud Source Repository.
          id: RepoSource
          properties:
            branchName:
              description: Name of the branch to build.
              type: string
            commitSha:
              description: Explicit commit SHA to build.
              type: string
            dir:
              description: |-
                Directory, relative to the source root, in which to run the build.

                This must be a relative path. If a step's `dir` is specified and is an
                absolute path, this value is ignored for that step's execution.
              type: string
            projectId:
              description: |-
                ID of the project that owns the Cloud Source Repository. If omitted, the
                project ID requesting the build is assumed.
              type: string
            repoName:
              description: |-
                Name of the Cloud Source Repository. If omitted, the name "default" is
                assumed.
              type: string
            tagName:
              description: Name of the tag to build.
              type: string
          type: object
        Results:
          description: Artifacts created by the build pipeline.
          id: Results
          properties:
            artifactManifest:
              description: Path to the artifact manifest. Only populated when artifacts
                are uploaded.
              type: string
            artifactTiming:
              $ref: '#/schemas/TimeSpan'
              description: Time to push all non-container artifacts.
            buildStepImages:
              description: |-
                List of build step digests, in the order corresponding to build step
                indices.
              items:
                type: string
              type: array
            buildStepOutputs:
              description: |-
                List of build step outputs, produced by builder images, in the order
                corresponding to build step indices.

                [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders)
                can produce this output by writing to `$BUILDER_OUTPUT/output`.
                Only the first 4KB of data is stored.
              items:
                format: byte
                type: string
              type: array
            images:
              description: Container images that were built as a part of the build.
              items:
                $ref: '#/schemas/BuiltImage'
              type: array
            numArtifacts:
              description: Number of artifacts uploaded. Only populated when artifacts
                are uploaded.
              format: int64
              type: string
          type: object
        Secret:
          description: |-
            Pairs a set of secret environment variables containing encrypted
            values with the Cloud KMS key to use to decrypt the value.
          id: Secret
          properties:
            kmsKeyName:
              description: Cloud KMS key name to use to decrypt these envs.
              type: string
            secretEnv:
              additionalProperties:
                format: byte
                type: string
              description: |-
                Map of environment variable name to its encrypted value.

                Secret environment variables must be unique across all of a build's
                secrets, and must be used by at least one build step. Values can be at most
                64 KB in size. There can be at most 100 secret values across all of a
                build's secrets.
              type: object
          type: object
        Source:
          description: Location of the source in a supported storage service.
          id: Source
          properties:
            repoSource:
              $ref: '#/schemas/RepoSource'
              description: |-
                If provided, get the source from this location in a Cloud Source
                Repository.
            storageSource:
              $ref: '#/schemas/StorageSource'
              description: If provided, get the source from this location in Google
                Cloud Storage.
          type: object
        SourceProvenance:
          description: |-
            Provenance of the source. Ways to find the original source, or verify that
            some source was used for this build.
          id: SourceProvenance
          properties:
            fileHashes:
              additionalProperties:
                $ref: '#/schemas/FileHashes'
              description: |-
                Output only. Hash(es) of the build source, which can be used to verify that
                the original source integrity was maintained in the build. Note that
                `FileHashes` will only be populated if `BuildOptions` has requested a
                `SourceProvenanceHash`.

                The keys to this map are file paths used as build source and the values
                contain the hash values for those files.

                If the build source came in a single package such as a gzipped tarfile
                (`.tar.gz`), the `FileHash` will be for the single path to that file.
              type: object
            resolvedRepoSource:
              $ref: '#/schemas/RepoSource'
              description: |-
                A copy of the build's `source.repo_source`, if exists, with any
                revisions resolved.
            resolvedStorageSource:
              $ref: '#/schemas/StorageSource'
              description: |-
                A copy of the build's `source.storage_source`, if exists, with any
                generations resolved.
          type: object
        StorageSource:
          description: Location of the source in an archive file in Google Cloud Storage.
          id: StorageSource
          properties:
            bucket:
              description: |-
                Google Cloud Storage bucket containing the source (see
                [Bucket Name
                Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
              type: string
            generation:
              description: |-
                Google Cloud Storage generation for the object. If the generation is
                omitted, the latest generation will be used.
              format: int64
              type: string
            object:
              description: |-
                Google Cloud Storage object containing the source.

                This object must be a gzipped archive file (`.tar.gz`) containing source to
                build.
              type: string
          type: object
        TimeSpan:
          description: Start and end times for a build execution phase.
          id: TimeSpan
          properties:
            endTime:
              description: End of time span.
              format: google-datetime
              type: string
            startTime:
              description: Start of time span.
              format: google-datetime
              type: string
          type: object
        Volume:
          description: |-
            Volume describes a Docker container volume which is mounted into build steps
            in order to persist files across build step execution.
          id: Volume
          properties:
            name:
              description: |-
                Name of the volume to mount.

                Volume names must be unique per build step and must be valid names for
                Docker volumes. Each named volume must be used by at least two build steps.
              type: string
            path:
              description: |-
                Path at which to mount the volume.

                Paths must be absolute and cannot conflict with other volume paths on the
                same build step or with certain reserved volume paths.
              type: string
          type: object
    output:
      $schema: http://json-schema.org/draft-03/schema#
      mainSchema:
        $ref: '#/schemas/BuildTrigger'
      methodName: get
      schemas:
        ArtifactObjects:
          description: |-
            Files in the workspace to upload to Cloud Storage upon successful
            completion of all build steps.
          id: ArtifactObjects
          properties:
            location:
              description: |-
                Cloud Storage bucket and optional object path, in the form
                "gs://bucket/path/to/somewhere/". (see [Bucket Name
                Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).

                Files in the workspace matching any path pattern will be uploaded to
                Cloud Storage with this location as a prefix.
              type: string
            paths:
              description: Path globs used to match files in the build's workspace.
              items:
                type: string
              type: array
            timing:
              $ref: '#/schemas/TimeSpan'
              description: Output only. Stores timing information for pushing all
                artifact objects.
          type: object
        Artifacts:
          description: |-
            Artifacts produced by a build that should be uploaded upon
            successful completion of all build steps.
          id: Artifacts
          properties:
            images:
              description: |-
                A list of images to be pushed upon the successful completion of all build
                steps.

                The images will be pushed using the builder service account's credentials.

                The digests of the pushed images will be stored in the Build resource's
                results field.

                If any of the images fail to be pushed, the build is marked FAILURE.
              items:
                type: string
              type: array
            objects:
              $ref: '#/schemas/ArtifactObjects'
              description: |-
                A list of objects to be uploaded to Cloud Storage upon successful
                completion of all build steps.

                Files in the workspace matching specified paths globs will be uploaded to
                the specified Cloud Storage location using the builder service account's
                credentials.

                The location and generation of the uploaded objects will be stored in the
                Build resource's results field.

                If any objects fail to be pushed, the build is marked FAILURE.
          type: object
        Build:
          description: |-
            A build resource in the Cloud Build API.

            At a high level, a `Build` describes where to find source code, how to build
            it (for example, the builder image to run on the source), and where to store
            the built artifacts.

            Fields can include the following variables, which will be expanded when the
            build is created:

            - $PROJECT_ID: the project ID of the build.
            - $BUILD_ID: the autogenerated ID of the build.
            - $REPO_NAME: the source repository name specified by RepoSource.
            - $BRANCH_NAME: the branch name specified by RepoSource.
            - $TAG_NAME: the tag name specified by RepoSource.
            - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or
              resolved from the specified branch or tag.
            - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
          id: Build
          properties:
            artifacts:
              $ref: '#/schemas/Artifacts'
              description: |-
                Artifacts produced by the build that should be uploaded upon
                successful completion of all build steps.
            buildTriggerId:
              description: |-
                Output only. The ID of the `BuildTrigger` that triggered this build, if it
                was triggered automatically.
              type: string
            createTime:
              description: Output only. Time at which the request to create the build
                was received.
              format: google-datetime
              type: string
            finishTime:
              description: |-
                Output only. Time at which execution of the build was finished.

                The difference between finish_time and start_time is the duration of the
                build's execution.
              format: google-datetime
              type: string
            id:
              description: Output only. Unique identifier of the build.
              type: string
            images:
              description: |-
                A list of images to be pushed upon the successful completion of all build
                steps.

                The images are pushed using the builder service account's credentials.

                The digests of the pushed images will be stored in the `Build` resource's
                results field.

                If any of the images fail to be pushed, the build status is marked
                `FAILURE`.
              items:
                type: string
              type: array
            logUrl:
              description: Output only. URL to logs for this build in Google Cloud
                Console.
              type: string
            logsBucket:
              description: |-
                Google Cloud Storage bucket where logs should be written (see
                [Bucket Name
                Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
                Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
              type: string
            options:
              $ref: '#/schemas/BuildOptions'
              description: Special options for this build.
            projectId:
              description: Output only. ID of the project.
              type: string
            results:
              $ref: '#/schemas/Results'
              description: Output only. Results of the build.
            secrets:
              description: Secrets to decrypt using Cloud Key Management Service.
              items:
                $ref: '#/schemas/Secret'
              type: array
            source:
              $ref: '#/schemas/Source'
              description: The location of the source files to build.
            sourceProvenance:
              $ref: '#/schemas/SourceProvenance'
              description: Output only. A permanent fixed identifier for source.
            startTime:
              description: Output only. Time at which execution of the build was started.
              format: google-datetime
              type: string
            status:
              description: Output only. Status of the build.
              enum:
              - STATUS_UNKNOWN
              - QUEUED
              - WORKING
              - SUCCESS
              - FAILURE
              - INTERNAL_ERROR
              - TIMEOUT
              - CANCELLED
              enumDescriptions:
              - Status of the build is unknown.
              - Build or step is queued; work has not yet begun.
              - Build or step is being executed.
              - Build or step finished successfully.
              - Build or step failed to complete successfully.
              - Build or step failed due to an internal cause.
              - Build or step took longer than was allowed.
              - Build or step was canceled by a user.
              type: string
            statusDetail:
              description: Output only. Customer-readable message about the current
                status.
              type: string
            steps:
              description: Required. The operations to be performed on the workspace.
              items:
                $ref: '#/schemas/BuildStep'
              type: array
            substitutions:
              additionalProperties:
                type: string
              description: Substitutions data for `Build` resource.
              type: object
            tags:
              description: Tags for annotation of a `Build`. These are not docker
                tags.
              items:
                type: string
              type: array
            timeout:
              description: |-
                Amount of time that this build should be allowed to run, to second
                granularity. If this amount of time elapses, work on the build will cease
                and the build status will be `TIMEOUT`.

                Default time is ten minutes.
              format: google-duration
              type: string
            timing:
              additionalProperties:
                $ref: '#/schemas/TimeSpan'
              description: |-
                Output only. Stores timing information for phases of the build. Valid keys
                are:

                * BUILD: time to execute all build steps
                * PUSH: time to push all specified images.
                * FETCHSOURCE: time to fetch source.

                If the build does not specify source or images,
                these keys will not be included.
              type: object
          type: object
        BuildOptions:
          description: Optional arguments to enable specific features of builds.
          id: BuildOptions
          properties:
            diskSizeGb:
              description: |-
                Requested disk size for the VM that runs the build. Note that this is *NOT*
                "disk free"; some of the space will be used by the operating system and
                build utilities. Also note that this is the minimum disk size that will be
                allocated for the build -- the build may run with a larger disk than
                requested. At present, the maximum disk size is 1000GB; builds that request
                more than the maximum are rejected with an error.
              format: int64
              type: string
            env:
              description: |-
                A list of global environment variable definitions that will exist for all
                build steps in this build. If a variable is defined in both globally and in
                a build step, the variable will use the build step value.

                The elements are of the form "KEY=VALUE" for the environment variable "KEY"
                being given the value "VALUE".
              items:
                type: string
              type: array
            logStreamingOption:
              description: |-
                Option to define build log streaming behavior to Google Cloud
                Storage.
              enum:
              - STREAM_DEFAULT
              - STREAM_ON
              - STREAM_OFF
              enumDescriptions:
              - Service may automatically determine build log streaming behavior.
              - Build logs should be streamed to Google Cloud Storage.
              - |-
                Build logs should not be streamed to Google Cloud Storage; they will be
                written when the build is completed.
              type: string
            logging:
              description: |-
                Option to specify the logging mode, which determines where the logs are
                stored.
              enum:
              - LOGGING_UNSPECIFIED
              - LEGACY
              - GCS_ONLY
              enumDescriptions:
              - |-
                The service determines the logging mode. The default is `LEGACY`. Do not
                rely on the default logging behavior as it may change in the future.
              - Stackdriver logging and Cloud Storage logging are enabled.
              - Only Cloud Storage logging is enabled.
              type: string
            machineType:
              description: Compute Engine machine type on which to run the build.
              enum:
              - UNSPECIFIED
              - N1_HIGHCPU_8
              - N1_HIGHCPU_32
              enumDescriptions:
              - Standard machine type.
              - Highcpu machine with 8 CPUs.
              - Highcpu machine with 32 CPUs.
              type: string
            requestedVerifyOption:
              description: Requested verifiability options.
              enum:
              - NOT_VERIFIED
              - VERIFIED
              enumDescriptions:
              - Not a verifiable build. (default)
              - Verified build.
              type: string
            secretEnv:
              description: |-
                A list of global environment variables, which are encrypted using a Cloud
                Key Management Service crypto key. These values must be specified in the
                build's `Secret`. These variables will be available to all build steps
                in this build.
              items:
                type: string
              type: array
            sourceProvenanceHash:
              description: Requested hash for SourceProvenance.
              enumDescriptions:
              - No hash requested.
              - Use a sha256 hash.
              - Use a md5 hash.
              items:
                enum:
                - NONE
                - SHA256
                - MD5
                type: string
              type: array
            substitutionOption:
              description: |-
                Option to specify behavior when there is an error in the substitution
                checks.
              enum:
              - MUST_MATCH
              - ALLOW_LOOSE
              enumDescriptions:
              - |-
                Fails the build if error in substitutions checks, like missing
                a substitution in the template or in the map.
              - Do not fail the build if error in substitutions checks.
              type: string
            volumes:
              description: |-
                Global list of volumes to mount for ALL build steps

                Each volume is created as an empty volume prior to starting the build
                process. Upon completion of the build, volumes and their contents are
                discarded. Global volume names and paths cannot conflict with the volumes
                defined a build step.

                Using a global volume in a build with only one step is not valid as
                it is indicative of a build request with an incorrect configuration.
              items:
                $ref: '#/schemas/Volume'
              type: array
            workerPool:
              description: |-
                Option to specify a `WorkerPool` for the build. User specifies the pool
                with the format "[WORKERPOOL_PROJECT_ID]/[WORKERPOOL_NAME]".
                This is an experimental field.
              type: string
          type: object
        BuildStep:
          description: A step in the build pipeline.
          id: BuildStep
          properties:
            args:
              description: |-
                A list of arguments that will be presented to the step when it is started.

                If the image used to run the step's container has an entrypoint, the `args`
                are used as arguments to that entrypoint. If the image does not define
                an entrypoint, the first element in args is used as the entrypoint,
                and the remainder will be used as arguments.
              items:
                type: string
              type: array
            dir:
              description: |-
                Working directory to use when running this step's container.

                If this value is a relative path, it is relative to the build's working
                directory. If this value is absolute, it may be outside the build's working
                directory, in which case the contents of the path may not be persisted
                across build step executions, unless a `volume` for that path is specified.

                If the build specifies a `RepoSource` with `dir` and a step with a `dir`,
                which specifies an absolute path, the `RepoSource` `dir` is ignored for
                the step's execution.
              type: string
            entrypoint:
              description: |-
                Entrypoint to be used instead of the build step image's default entrypoint.
                If unset, the image's default entrypoint is used.
              type: string
            env:
              description: |-
                A list of environment variable definitions to be used when running a step.

                The elements are of the form "KEY=VALUE" for the environment variable "KEY"
                being given the value "VALUE".
              items:
                type: string
              type: array
            id:
              description: |-
                Unique identifier for this build step, used in `wait_for` to
                reference this build step as a dependency.
              type: string
            name:
              description: |-
                Required. The name of the container image that will run this particular
                build step.

                If the image is available in the host's Docker daemon's cache, it
                will be run directly. If not, the host will attempt to pull the image
                first, using the builder service account's credentials if necessary.

                The Docker daemon's cache will already have the latest versions of all of
                the officially supported build steps
                ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).
                The Docker daemon will also have cached many of the layers for some popular
                images, like "ubuntu", "debian", but they will be refreshed at the time you
                attempt to use them.

                If you built an image in a previous build step, it will be stored in the
                host's Docker daemon's cache and is available to use as the name for a
                later build step.
              type: string
            pullTiming:
              $ref: '#/schemas/TimeSpan'
              description: |-
                Output only. Stores timing information for pulling this build step's
                builder image only.
            secretEnv:
              description: |-
                A list of environment variables which are encrypted using a Cloud Key
                Management Service crypto key. These values must be specified in the
                build's `Secret`.
              items:
                type: string
              type: array
            status:
              description: |-
                Output only. Status of the build step. At this time, build step status is
                only updated on build completion; step status is not updated in real-time
                as the build progresses.
              enum:
              - STATUS_UNKNOWN
              - QUEUED
              - WORKING
              - SUCCESS
              - FAILURE
              - INTERNAL_ERROR
              - TIMEOUT
              - CANCELLED
              enumDescriptions:
              - Status of the build is unknown.
              - Build or step is queued; work has not yet begun.
              - Build or step is being executed.
              - Build or step finished successfully.
              - Build or step failed to complete successfully.
              - Build or step failed due to an internal cause.
              - Build or step took longer than was allowed.
              - Build or step was canceled by a user.
              type: string
            timeout:
              description: |-
                Time limit for executing this build step. If not defined, the step has no
                time limit and will be allowed to continue to run until either it completes
                or the build itself times out.
              format: google-duration
              type: string
            timing:
              $ref: '#/schemas/TimeSpan'
              description: Output only. Stores timing information for executing this
                build step.
            volumes:
              description: |-
                List of volumes to mount into the build step.

                Each volume is created as an empty volume prior to execution of the
                build step. Upon completion of the build, volumes and their contents are
                discarded.

                Using a named volume in only one step is not valid as it is indicative
                of a build request with an incorrect configuration.
              items:
                $ref: '#/schemas/Volume'
              type: array
            waitFor:
              description: |-
                The ID(s) of the step(s) that this build step depends on.
                This build step will not start until all the build steps in `wait_for`
                have completed successfully. If `wait_for` is empty, this build step will
                start when all previous build steps in the `Build.Steps` list have
                completed successfully.
              items:
                type: string
              type: array
          type: object
        BuildTrigger:
          description: |-
            Configuration for an automated build in response to source repository
            changes.
          id: BuildTrigger
          properties:
            build:
              $ref: '#/schemas/Build'
              description: Contents of the build template.
            createTime:
              description: Output only. Time when the trigger was created.
              format: google-datetime
              type: string
            description:
              description: Human-readable description of this trigger.
              type: string
            disabled:
              description: If true, the trigger will never result in a build.
              type: boolean
            filename:
              description: |-
                Path, from the source root, to a file whose contents is used for the
                template.
              type: string
            github:
              $ref: '#/schemas/GitHubEventsConfig'
              description: |-
                GitHubEventsConfig describes the configuration of a trigger that creates
                a build whenever a GitHub event is received.
            id:
              description: Output only. Unique identifier of the trigger.
              type: string
            ignoredFiles:
              description: |-
                ignored_files and included_files are file glob matches using
                http://godoc/pkg/path/filepath#Match extended with support for "**".

                If ignored_files and changed files are both empty, then they are
                not used to determine whether or not to trigger a build.

                If ignored_files is not empty, then we ignore any files that match
                any of the ignored_file globs. If the change has no files that are
                outside of the ignored_files globs, then we do not trigger a build.
              items:
                type: string
              type: array
            includedFiles:
              description: |-
                If any of the files altered in the commit pass the ignored_files
                filter and included_files is empty, then as far as this filter is
                concerned, we should trigger the build.

                If any of the files altered in the commit pass the ignored_files
                filter and included_files is not empty, then we make sure that at
                least one of those files matches a included_files glob. If not,
                then we do not trigger a build.
              items:
                type: string
              type: array
            substitutions:
              additionalProperties:
                type: string
              description: Substitutions data for Build resource.
              type: object
            tags:
              description: Tags for annotation of a `BuildTrigger`
              items:
                type: string
              type: array
            triggerTemplate:
              $ref: '#/schemas/RepoSource'
              description: |-
                Template describing the types of source changes to trigger a build.

                Branch and tag names in trigger templates are interpreted as regular
                expressions. Any branch or tag change that matches that regular expression
                will trigger a build.
          type: object
        BuiltImage:
          description: An image built by the pipeline.
          id: BuiltImage
          properties:
            digest:
              description: Docker Registry 2.0 digest.
              type: string
            name:
              description: |-
                Name used to push the container image to Google Container Registry, as
                presented to `docker push`.
              type: string
            pushTiming:
              $ref: '#/schemas/TimeSpan'
              description: Output only. Stores timing information for pushing the
                specified image.
          type: object
        FileHashes:
          description: |-
            Container message for hashes of byte content of files, used in
            SourceProvenance messages to verify integrity of source input to the build.
          id: FileHashes
          properties:
            fileHash:
              description: Collection of file hashes.
              items:
                $ref: '#/schemas/Hash'
              type: array
          type: object
        GitHubEventsConfig:
          description: |-
            GitHubEventsConfig describes the configuration of a trigger that creates a
            build whenever a GitHub event is received.

            This message is experimental.
          id: GitHubEventsConfig
          properties:
            installationId:
              description: The installationID that emits the GitHub event.
              format: int64
              type: string
            name:
              description: |-
                Name of the repository. For example: The name for
                https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
              type: string
            owner:
              description: |-
                Owner of the repository. For example: The owner for
                https://github.com/googlecloudplatform/cloud-builders is
                "googlecloudplatform".
              type: string
            pullRequest:
              $ref: '#/schemas/PullRequestFilter'
              description: filter to match changes in pull requests.
            push:
              $ref: '#/schemas/PushFilter'
              description: filter to match changes in refs like branches, tags.
          type: object
        Hash:
          description: Container message for hash values.
          id: Hash
          properties:
            type:
              description: The type of hash that was performed.
              enum:
              - NONE
              - SHA256
              - MD5
              enumDescriptions:
              - No hash requested.
              - Use a sha256 hash.
              - Use a md5 hash.
              type: string
            value:
              description: The hash value.
              format: byte
              type: string
          type: object
        PullRequestFilter:
          description: |-
            PullRequestFilter contains filter properties for matching GitHub Pull
            Requests.
          id: PullRequestFilter
          properties:
            branch:
              description: |-
                Regex of branches to match.

                The syntax of the regular expressions accepted is the syntax accepted by
                RE2 and described at https://github.com/google/re2/wiki/Syntax
              type: string
            commentControl:
              description: |-
                Whether to block builds on a "/gcbrun" comment from a repository owner or
                collaborator.
              enum:
              - COMMENTS_DISABLED
              - COMMENTS_ENABLED
              enumDescriptions:
              - Do not require comments on Pull Requests before builds are triggered.
              - |-
                Enforce that repository owners or collaborators must comment on Pull
                Requests before builds are triggered.
              type: string
          type: object
        PushFilter:
          description: Push contains filter properties for matching GitHub git pushes.
          id: PushFilter
          properties:
            branch:
              description: |-
                Regexes of branches to match.

                The syntax of the regular expressions accepted is the syntax accepted by
                RE2 and described at https://github.com/google/re2/wiki/Syntax
              type: string
            tag:
              description: |-
                Regexes of tags to match.

                The syntax of the regular expressions accepted is the syntax accepted by
                RE2 and described at https://github.com/google/re2/wiki/Syntax
              type: string
          type: object
        RepoSource:
          description: Location of the source in a Google Cloud Source Repository.
          id: RepoSource
          properties:
            branchName:
              description: Name of the branch to build.
              type: string
            commitSha:
              description: Explicit commit SHA to build.
              type: string
            dir:
              description: |-
                Directory, relative to the source root, in which to run the build.

                This must be a relative path. If a step's `dir` is specified and is an
                absolute path, this value is ignored for that step's execution.
              type: string
            projectId:
              description: |-
                ID of the project that owns the Cloud Source Repository. If omitted, the
                project ID requesting the build is assumed.
              type: string
            repoName:
              description: |-
                Name of the Cloud Source Repository. If omitted, the name "default" is
                assumed.
              type: string
            tagName:
              description: Name of the tag to build.
              type: string
          type: object
        Results:
          description: Artifacts created by the build pipeline.
          id: Results
          properties:
            artifactManifest:
              description: Path to the artifact manifest. Only populated when artifacts
                are uploaded.
              type: string
            artifactTiming:
              $ref: '#/schemas/TimeSpan'
              description: Time to push all non-container artifacts.
            buildStepImages:
              description: |-
                List of build step digests, in the order corresponding to build step
                indices.
              items:
                type: string
              type: array
            buildStepOutputs:
              description: |-
                List of build step outputs, produced by builder images, in the order
                corresponding to build step indices.

                [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders)
                can produce this output by writing to `$BUILDER_OUTPUT/output`.
                Only the first 4KB of data is stored.
              items:
                format: byte
                type: string
              type: array
            images:
              description: Container images that were built as a part of the build.
              items:
                $ref: '#/schemas/BuiltImage'
              type: array
            numArtifacts:
              description: Number of artifacts uploaded. Only populated when artifacts
                are uploaded.
              format: int64
              type: string
          type: object
        Secret:
          description: |-
            Pairs a set of secret environment variables containing encrypted
            values with the Cloud KMS key to use to decrypt the value.
          id: Secret
          properties:
            kmsKeyName:
              description: Cloud KMS key name to use to decrypt these envs.
              type: string
            secretEnv:
              additionalProperties:
                format: byte
                type: string
              description: |-
                Map of environment variable name to its encrypted value.

                Secret environment variables must be unique across all of a build's
                secrets, and must be used by at least one build step. Values can be at most
                64 KB in size. There can be at most 100 secret values across all of a
                build's secrets.
              type: object
          type: object
        Source:
          description: Location of the source in a supported storage service.
          id: Source
          properties:
            repoSource:
              $ref: '#/schemas/RepoSource'
              description: |-
                If provided, get the source from this location in a Cloud Source
                Repository.
            storageSource:
              $ref: '#/schemas/StorageSource'
              description: If provided, get the source from this location in Google
                Cloud Storage.
          type: object
        SourceProvenance:
          description: |-
            Provenance of the source. Ways to find the original source, or verify that
            some source was used for this build.
          id: SourceProvenance
          properties:
            fileHashes:
              additionalProperties:
                $ref: '#/schemas/FileHashes'
              description: |-
                Output only. Hash(es) of the build source, which can be used to verify that
                the original source integrity was maintained in the build. Note that
                `FileHashes` will only be populated if `BuildOptions` has requested a
                `SourceProvenanceHash`.

                The keys to this map are file paths used as build source and the values
                contain the hash values for those files.

                If the build source came in a single package such as a gzipped tarfile
                (`.tar.gz`), the `FileHash` will be for the single path to that file.
              type: object
            resolvedRepoSource:
              $ref: '#/schemas/RepoSource'
              description: |-
                A copy of the build's `source.repo_source`, if exists, with any
                revisions resolved.
            resolvedStorageSource:
              $ref: '#/schemas/StorageSource'
              description: |-
                A copy of the build's `source.storage_source`, if exists, with any
                generations resolved.
          type: object
        StorageSource:
          description: Location of the source in an archive file in Google Cloud Storage.
          id: StorageSource
          properties:
            bucket:
              description: |-
                Google Cloud Storage bucket containing the source (see
                [Bucket Name
                Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
              type: string
            generation:
              description: |-
                Google Cloud Storage generation for the object. If the generation is
                omitted, the latest generation will be used.
              format: int64
              type: string
            object:
              description: |-
                Google Cloud Storage object containing the source.

                This object must be a gzipped archive file (`.tar.gz`) containing source to
                build.
              type: string
          type: object
        TimeSpan:
          description: Start and end times for a build execution phase.
          id: TimeSpan
          properties:
            endTime:
              description: End of time span.
              format: google-datetime
              type: string
            startTime:
              description: Start of time span.
              format: google-datetime
              type: string
          type: object
        Volume:
          description: |-
            Volume describes a Docker container volume which is mounted into build steps
            in order to persist files across build step execution.
          id: Volume
          properties:
            name:
              description: |-
                Name of the volume to mount.

                Volume names must be unique per build step and must be valid names for
                Docker volumes. Each named volume must be used by at least two build steps.
              type: string
            path:
              description: |-
                Path at which to mount the volume.

                Paths must be absolute and cannot conflict with other volume paths on the
                same build step or with certain reserved volume paths.
              type: string
          type: object
  selfLink: https://www.googleapis.com/deploymentmanager/v2beta/projects/gcp-types/global/typeProviders/cloudbuild-v1/types/projects.triggers?alt=json
  title: Cloud Build API
