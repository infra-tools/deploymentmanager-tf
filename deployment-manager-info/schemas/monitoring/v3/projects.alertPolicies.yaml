type_info:
  documentationLink: https://cloud.google.com/monitoring/api/
  kind: deploymentmanager#typeInfo
  name: projects.alertPolicies
  schema:
    input:
      $schema: http://json-schema.org/draft-03/schema#
      create:
        properties:
          combiner:
            description: How to combine the results of multiple conditions to determine
              if an incident should be opened.
            enum:
            - COMBINE_UNSPECIFIED
            - AND
            - OR
            - AND_WITH_MATCHING_RESOURCE
            enumDescriptions:
            - An unspecified combiner.
            - Combine conditions using the logical AND operator. An incident is created
              only if all conditions are met simultaneously. This combiner is satisfied
              if all conditions are met, even if they are met on completely different
              resources.
            - Combine conditions using the logical OR operator. An incident is created
              if any of the listed conditions is met.
            - Combine conditions using logical AND operator, but unlike the regular
              AND option, an incident is created only if all conditions are met simultaneously
              on at least one resource.
            type: string
          conditions:
            description: A list of conditions for the policy. The conditions are combined
              by AND or OR according to the combiner field. If the combined conditions
              evaluate to true, then an incident is created. A policy can have from
              one to six conditions.
            items:
              $ref: '#/schemas/Condition'
            type: array
          creationRecord:
            $ref: '#/schemas/MutationRecord'
            description: A read-only record of the creation of the alerting policy.
              If provided in a call to create or update, this field will be ignored.
          displayName:
            description: A short name or phrase used to identify the policy in dashboards,
              notifications, and incidents. To avoid confusion, don't use the same
              display name for multiple policies in the same project. The name is
              limited to 512 Unicode characters.
            type: string
          documentation:
            $ref: '#/schemas/Documentation'
            description: Documentation that is included with notifications and incidents
              related to this policy. Best practice is for the documentation to include
              information to help responders understand, mitigate, escalate, and correct
              the underlying problems detected by the alerting policy. Notification
              channels that have limited capacity might not show this documentation.
          enabled:
            description: Whether or not the policy is enabled. On write, the default
              interpretation if unset is that the policy is enabled. On read, clients
              should not make any assumption about the state if it has not been populated.
              The field should always be populated on List and Get operations, unless
              a field projection has been specified that strips it out.
            type: boolean
          mutationRecord:
            $ref: '#/schemas/MutationRecord'
            description: A read-only record of the most recent change to the alerting
              policy. If provided in a call to create or update, this field will be
              ignored.
          name:
            description: The project in which to create the alerting policy. The format
              is projects/[PROJECT_ID].Note that this field names the parent container
              in which the alerting policy will be written, not the name of the created
              policy. The alerting policy that is returned will have a name that contains
              a normalized representation of this name as a prefix but adds a suffix
              of the form /alertPolicies/[POLICY_ID], identifying the policy in the
              container.
            location: path
            pattern: ^projects/[^/]+$
            required: true
            type: string
          notificationChannels:
            description: |
              Identifies the notification channels to which notifications should be sent when incidents are opened or closed or when new violations occur on an already opened incident. Each element of this array corresponds to the name field in each of the NotificationChannel objects that are returned from the ListNotificationChannels method. The syntax of the entries in this field is:
              projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID]
            items:
              type: string
            type: array
          userLabels:
            additionalProperties:
              type: string
            description: User-supplied key/value data to be used for organizing and
              identifying the AlertPolicy objects.The field can contain up to 64 entries.
              Each key and value is limited to 63 Unicode characters or 128 bytes,
              whichever is smaller. Labels and values can contain only lowercase letters,
              numerals, underscores, and dashes. Keys must begin with a letter.
            type: object
          validity:
            $ref: '#/schemas/Status'
            description: Read-only description of how the alert policy is invalid.
              OK if the alert policy is valid. If not OK, the alert policy will not
              generate incidents.
        type: object
      methodName: create
      schemas:
        Aggregation:
          description: Describes how to combine multiple time series to provide different
            views of the data. Aggregation consists of an alignment step on individual
            time series (alignment_period and per_series_aligner) followed by an optional
            reduction step of the data across the aligned time series (cross_series_reducer
            and group_by_fields). For more details, see Aggregation.
          id: Aggregation
          properties:
            alignmentPeriod:
              description: The alignment period for per-time series alignment. If
                present, alignmentPeriod must be at least 60 seconds. After per-time
                series alignment, each time series will contain data points only on
                the period boundaries. If perSeriesAligner is not specified or equals
                ALIGN_NONE, then this field is ignored. If perSeriesAligner is specified
                and does not equal ALIGN_NONE, then this field must be defined; otherwise
                an error is returned.
              format: google-duration
              type: string
            crossSeriesReducer:
              description: The approach to be used to combine time series. Not all
                reducer functions may be applied to all time series, depending on
                the metric type and the value type of the original time series. Reduction
                may change the metric type of value type of the time series.Time series
                data must be aligned in order to perform cross-time series reduction.
                If crossSeriesReducer is specified, then perSeriesAligner must be
                specified and not equal ALIGN_NONE and alignmentPeriod must be specified;
                otherwise, an error is returned.
              enum:
              - REDUCE_NONE
              - REDUCE_MEAN
              - REDUCE_MIN
              - REDUCE_MAX
              - REDUCE_SUM
              - REDUCE_STDDEV
              - REDUCE_COUNT
              - REDUCE_COUNT_TRUE
              - REDUCE_COUNT_FALSE
              - REDUCE_FRACTION_TRUE
              - REDUCE_PERCENTILE_99
              - REDUCE_PERCENTILE_95
              - REDUCE_PERCENTILE_50
              - REDUCE_PERCENTILE_05
              enumDescriptions:
              - No cross-time series reduction. The output of the aligner is returned.
              - Reduce by computing the mean across time series for each alignment
                period. This reducer is valid for delta and gauge metrics with numeric
                or distribution values. The value type of the output is DOUBLE.
              - Reduce by computing the minimum across time series for each alignment
                period. This reducer is valid for delta and gauge metrics with numeric
                values. The value type of the output is the same as the value type
                of the input.
              - Reduce by computing the maximum across time series for each alignment
                period. This reducer is valid for delta and gauge metrics with numeric
                values. The value type of the output is the same as the value type
                of the input.
              - Reduce by computing the sum across time series for each alignment
                period. This reducer is valid for delta and gauge metrics with numeric
                and distribution values. The value type of the output is the same
                as the value type of the input.
              - Reduce by computing the standard deviation across time series for
                each alignment period. This reducer is valid for delta and gauge metrics
                with numeric or distribution values. The value type of the output
                is DOUBLE.
              - Reduce by computing the count of data points across time series for
                each alignment period. This reducer is valid for delta and gauge metrics
                of numeric, Boolean, distribution, and string value type. The value
                type of the output is INT64.
              - Reduce by computing the count of True-valued data points across time
                series for each alignment period. This reducer is valid for delta
                and gauge metrics of Boolean value type. The value type of the output
                is INT64.
              - Reduce by computing the count of False-valued data points across time
                series for each alignment period. This reducer is valid for delta
                and gauge metrics of Boolean value type. The value type of the output
                is INT64.
              - Reduce by computing the fraction of True-valued data points across
                time series for each alignment period. This reducer is valid for delta
                and gauge metrics of Boolean value type. The output value is in the
                range 0, 1 and has value type DOUBLE.
              - Reduce by computing 99th percentile of data points across time series
                for each alignment period. This reducer is valid for gauge and delta
                metrics of numeric and distribution type. The value of the output
                is DOUBLE
              - Reduce by computing 95th percentile of data points across time series
                for each alignment period. This reducer is valid for gauge and delta
                metrics of numeric and distribution type. The value of the output
                is DOUBLE
              - Reduce by computing 50th percentile of data points across time series
                for each alignment period. This reducer is valid for gauge and delta
                metrics of numeric and distribution type. The value of the output
                is DOUBLE
              - Reduce by computing 5th percentile of data points across time series
                for each alignment period. This reducer is valid for gauge and delta
                metrics of numeric and distribution type. The value of the output
                is DOUBLE
              type: string
            groupByFields:
              description: The set of fields to preserve when crossSeriesReducer is
                specified. The groupByFields determine how the time series are partitioned
                into subsets prior to applying the aggregation function. Each subset
                contains time series that have the same value for each of the grouping
                fields. Each individual time series is a member of exactly one subset.
                The crossSeriesReducer is applied to each subset of time series. It
                is not possible to reduce across different resource types, so this
                field implicitly contains resource.type. Fields not specified in groupByFields
                are aggregated away. If groupByFields is not specified and all the
                time series have the same resource type, then the time series are
                aggregated into a single output time series. If crossSeriesReducer
                is not defined, this field is ignored.
              items:
                type: string
              type: array
            perSeriesAligner:
              description: The approach to be used to align individual time series.
                Not all alignment functions may be applied to all time series, depending
                on the metric type and value type of the original time series. Alignment
                may change the metric type or the value type of the time series.Time
                series data must be aligned in order to perform cross-time series
                reduction. If crossSeriesReducer is specified, then perSeriesAligner
                must be specified and not equal ALIGN_NONE and alignmentPeriod must
                be specified; otherwise, an error is returned.
              enum:
              - ALIGN_NONE
              - ALIGN_DELTA
              - ALIGN_RATE
              - ALIGN_INTERPOLATE
              - ALIGN_NEXT_OLDER
              - ALIGN_MIN
              - ALIGN_MAX
              - ALIGN_MEAN
              - ALIGN_COUNT
              - ALIGN_SUM
              - ALIGN_STDDEV
              - ALIGN_COUNT_TRUE
              - ALIGN_COUNT_FALSE
              - ALIGN_FRACTION_TRUE
              - ALIGN_PERCENTILE_99
              - ALIGN_PERCENTILE_95
              - ALIGN_PERCENTILE_50
              - ALIGN_PERCENTILE_05
              - ALIGN_PERCENT_CHANGE
              enumDescriptions:
              - No alignment. Raw data is returned. Not valid if cross-time series
                reduction is requested. The value type of the result is the same as
                the value type of the input.
              - Align and convert to delta metric type. This alignment is valid for
                cumulative metrics and delta metrics. Aligning an existing delta metric
                to a delta metric requires that the alignment period be increased.
                The value type of the result is the same as the value type of the
                input.One can think of this aligner as a rate but without time units;
                that is, the output is conceptually (second_point - first_point).
              - Align and convert to a rate. This alignment is valid for cumulative
                metrics and delta metrics with numeric values. The output is a gauge
                metric with value type DOUBLE.One can think of this aligner as conceptually
                providing the slope of the line that passes through the value at the
                start and end of the window. In other words, this is conceptually
                ((y1 - y0)/(t1 - t0)), and the output unit is one that has a "/time"
                dimension.If, by rate, you are looking for percentage change, see
                the ALIGN_PERCENT_CHANGE aligner option.
              - Align by interpolating between adjacent points around the period boundary.
                This alignment is valid for gauge metrics with numeric values. The
                value type of the result is the same as the value type of the input.
              - Align by shifting the oldest data point before the period boundary
                to the boundary. This alignment is valid for gauge metrics. The value
                type of the result is the same as the value type of the input.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the minimum of all data points in the period.
                This alignment is valid for gauge and delta metrics with numeric values.
                The value type of the result is the same as the value type of the
                input.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the maximum of all data points in the period.
                This alignment is valid for gauge and delta metrics with numeric values.
                The value type of the result is the same as the value type of the
                input.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the average or arithmetic mean of all data points
                in the period. This alignment is valid for gauge and delta metrics
                with numeric values. The value type of the output is DOUBLE.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the count of all data points in the period. This
                alignment is valid for gauge and delta metrics with numeric or Boolean
                values. The value type of the output is INT64.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the sum of all data points in the period. This
                alignment is valid for gauge and delta metrics with numeric and distribution
                values. The value type of the output is the same as the value type
                of the input.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the standard deviation of all data points in the
                period. This alignment is valid for gauge and delta metrics with numeric
                values. The value type of the output is DOUBLE.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the count of True-valued data points in the period.
                This alignment is valid for gauge metrics with Boolean values. The
                value type of the output is INT64.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the count of False-valued data points in the period.
                This alignment is valid for gauge metrics with Boolean values. The
                value type of the output is INT64.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the fraction of True-valued data points in the
                period. This alignment is valid for gauge metrics with Boolean values.
                The output value is in the range 0, 1 and has value type DOUBLE.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the 99th percentile of all data points in the
                period. This alignment is valid for gauge and delta metrics with distribution
                values. The output is a gauge metric with value type DOUBLE.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the 95th percentile of all data points in the
                period. This alignment is valid for gauge and delta metrics with distribution
                values. The output is a gauge metric with value type DOUBLE.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the 50th percentile of all data points in the
                period. This alignment is valid for gauge and delta metrics with distribution
                values. The output is a gauge metric with value type DOUBLE.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the 5th percentile of all data points in the period.
                This alignment is valid for gauge and delta metrics with distribution
                values. The output is a gauge metric with value type DOUBLE.
              - Align and convert to a percentage change. This alignment is valid
                for gauge and delta metrics with numeric values. This alignment conceptually
                computes the equivalent of "((current - previous)/previous)*100" where
                previous value is determined based on the alignmentPeriod. In the
                event that previous is 0 the calculated value is infinity with the
                exception that if both (current - previous) and previous are 0 the
                calculated value is 0. A 10 minute moving mean is computed at each
                point of the time window prior to the above calculation to smooth
                the metric and prevent false positives from very short lived spikes.
                Only applicable for data that is >= 0. Any values < 0 are treated
                as no data. While delta metrics are accepted by this alignment special
                care should be taken that the values for the metric will always be
                positive. The output is a gauge metric with value type DOUBLE.
              type: string
          type: object
        AlertPolicy:
          description: A description of the conditions under which some aspect of
            your system is considered to be "unhealthy" and the ways to notify people
            or services about this state. For an overview of alert policies, see Introduction
            to Alerting.
          id: AlertPolicy
          properties:
            combiner:
              description: How to combine the results of multiple conditions to determine
                if an incident should be opened.
              enum:
              - COMBINE_UNSPECIFIED
              - AND
              - OR
              - AND_WITH_MATCHING_RESOURCE
              enumDescriptions:
              - An unspecified combiner.
              - Combine conditions using the logical AND operator. An incident is
                created only if all conditions are met simultaneously. This combiner
                is satisfied if all conditions are met, even if they are met on completely
                different resources.
              - Combine conditions using the logical OR operator. An incident is created
                if any of the listed conditions is met.
              - Combine conditions using logical AND operator, but unlike the regular
                AND option, an incident is created only if all conditions are met
                simultaneously on at least one resource.
              type: string
            conditions:
              description: A list of conditions for the policy. The conditions are
                combined by AND or OR according to the combiner field. If the combined
                conditions evaluate to true, then an incident is created. A policy
                can have from one to six conditions.
              items:
                $ref: '#/schemas/Condition'
              type: array
            creationRecord:
              $ref: '#/schemas/MutationRecord'
              description: A read-only record of the creation of the alerting policy.
                If provided in a call to create or update, this field will be ignored.
            displayName:
              description: A short name or phrase used to identify the policy in dashboards,
                notifications, and incidents. To avoid confusion, don't use the same
                display name for multiple policies in the same project. The name is
                limited to 512 Unicode characters.
              type: string
            documentation:
              $ref: '#/schemas/Documentation'
              description: Documentation that is included with notifications and incidents
                related to this policy. Best practice is for the documentation to
                include information to help responders understand, mitigate, escalate,
                and correct the underlying problems detected by the alerting policy.
                Notification channels that have limited capacity might not show this
                documentation.
            enabled:
              description: Whether or not the policy is enabled. On write, the default
                interpretation if unset is that the policy is enabled. On read, clients
                should not make any assumption about the state if it has not been
                populated. The field should always be populated on List and Get operations,
                unless a field projection has been specified that strips it out.
              type: boolean
            mutationRecord:
              $ref: '#/schemas/MutationRecord'
              description: A read-only record of the most recent change to the alerting
                policy. If provided in a call to create or update, this field will
                be ignored.
            name:
              description: |-
                Required if the policy exists. The resource name for this policy. The syntax is:
                projects/[PROJECT_ID]/alertPolicies/[ALERT_POLICY_ID]
                [ALERT_POLICY_ID] is assigned by Stackdriver Monitoring when the policy is created. When calling the alertPolicies.create method, do not include the name field in the alerting policy passed as part of the request.
              type: string
            notificationChannels:
              description: |
                Identifies the notification channels to which notifications should be sent when incidents are opened or closed or when new violations occur on an already opened incident. Each element of this array corresponds to the name field in each of the NotificationChannel objects that are returned from the ListNotificationChannels method. The syntax of the entries in this field is:
                projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID]
              items:
                type: string
              type: array
            userLabels:
              additionalProperties:
                type: string
              description: User-supplied key/value data to be used for organizing
                and identifying the AlertPolicy objects.The field can contain up to
                64 entries. Each key and value is limited to 63 Unicode characters
                or 128 bytes, whichever is smaller. Labels and values can contain
                only lowercase letters, numerals, underscores, and dashes. Keys must
                begin with a letter.
              type: object
            validity:
              $ref: '#/schemas/Status'
              description: Read-only description of how the alert policy is invalid.
                OK if the alert policy is valid. If not OK, the alert policy will
                not generate incidents.
          type: object
        Condition:
          description: A condition is a true/false test that determines when an alerting
            policy should open an incident. If a condition evaluates to true, it signifies
            that something is wrong.
          id: Condition
          properties:
            conditionAbsent:
              $ref: '#/schemas/MetricAbsence'
              description: A condition that checks that a time series continues to
                receive new data points.
            conditionThreshold:
              $ref: '#/schemas/MetricThreshold'
              description: A condition that compares a time series against a threshold.
            displayName:
              description: A short name or phrase used to identify the condition in
                dashboards, notifications, and incidents. To avoid confusion, don't
                use the same display name for multiple conditions in the same policy.
              type: string
            name:
              description: |-
                Required if the condition exists. The unique resource name for this condition. Its syntax is:
                projects/[PROJECT_ID]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID]
                [CONDITION_ID] is assigned by Stackdriver Monitoring when the condition is created as part of a new or updated alerting policy.When calling the alertPolicies.create method, do not include the name field in the conditions of the requested alerting policy. Stackdriver Monitoring creates the condition identifiers and includes them in the new policy.When calling the alertPolicies.update method to update a policy, including a condition name causes the existing condition to be updated. Conditions without names are added to the updated policy. Existing conditions are deleted if they are not updated.Best practice is to preserve [CONDITION_ID] if you make only small changes, such as those to condition thresholds, durations, or trigger values. Otherwise, treat the change as a new condition and let the existing condition be deleted.
              type: string
          type: object
        Documentation:
          description: A content string and a MIME type that describes the content
            string's format.
          id: Documentation
          properties:
            content:
              description: The text of the documentation, interpreted according to
                mime_type. The content may not exceed 8,192 Unicode characters and
                may not exceed more than 10,240 bytes when encoded in UTF-8 format,
                whichever is smaller.
              type: string
            mimeType:
              description: The format of the content field. Presently, only the value
                "text/markdown" is supported. See Markdown (https://en.wikipedia.org/wiki/Markdown)
                for more information.
              type: string
          type: object
        MetricAbsence:
          description: A condition type that checks that monitored resources are reporting
            data. The configuration defines a metric and a set of monitored resources.
            The predicate is considered in violation when a time series for the specified
            metric of a monitored resource does not include any data in the specified
            duration.
          id: MetricAbsence
          properties:
            aggregations:
              description: Specifies the alignment of data points in individual time
                series as well as how to combine the retrieved time series together
                (such as when aggregating multiple streams on each resource to a single
                stream for each resource or when aggregating streams across all members
                of a group of resrouces). Multiple aggregations are applied in the
                order specified.This field is similar to the one in the MetricService.ListTimeSeries
                request. It is advisable to use the ListTimeSeries method when debugging
                this field.
              items:
                $ref: '#/schemas/Aggregation'
              type: array
            duration:
              description: The amount of time that a time series must fail to report
                new data to be considered failing. Currently, only values that are
                a multiple of a minute--e.g. 60, 120, or 300 seconds--are supported.
                If an invalid value is given, an error will be returned. The Duration.nanos
                field is ignored.
              format: google-duration
              type: string
            filter:
              description: A filter that identifies which time series should be compared
                with the threshold.The filter is similar to the one that is specified
                in the MetricService.ListTimeSeries request (that call is useful to
                verify the time series that will be retrieved / processed) and must
                specify the metric type and optionally may contain restrictions on
                resource type, resource labels, and metric labels. This field may
                not exceed 2048 Unicode characters in length.
              type: string
            trigger:
              $ref: '#/schemas/Trigger'
              description: The number/percent of time series for which the comparison
                must hold in order for the condition to trigger. If unspecified, then
                the condition will trigger if the comparison is true for any of the
                time series that have been identified by filter and aggregations.
          type: object
        MetricThreshold:
          description: A condition type that compares a collection of time series
            against a threshold.
          id: MetricThreshold
          properties:
            aggregations:
              description: Specifies the alignment of data points in individual time
                series as well as how to combine the retrieved time series together
                (such as when aggregating multiple streams on each resource to a single
                stream for each resource or when aggregating streams across all members
                of a group of resrouces). Multiple aggregations are applied in the
                order specified.This field is similar to the one in the MetricService.ListTimeSeries
                request. It is advisable to use the ListTimeSeries method when debugging
                this field.
              items:
                $ref: '#/schemas/Aggregation'
              type: array
            comparison:
              description: The comparison to apply between the time series (indicated
                by filter and aggregation) and the threshold (indicated by threshold_value).
                The comparison is applied on each time series, with the time series
                on the left-hand side and the threshold on the right-hand side.Only
                COMPARISON_LT and COMPARISON_GT are supported currently.
              enum:
              - COMPARISON_UNSPECIFIED
              - COMPARISON_GT
              - COMPARISON_GE
              - COMPARISON_LT
              - COMPARISON_LE
              - COMPARISON_EQ
              - COMPARISON_NE
              enumDescriptions:
              - No ordering relationship is specified.
              - The left argument is greater than the right argument.
              - The left argument is greater than or equal to the right argument.
              - The left argument is less than the right argument.
              - The left argument is less than or equal to the right argument.
              - The left argument is equal to the right argument.
              - The left argument is not equal to the right argument.
              type: string
            denominatorAggregations:
              description: Specifies the alignment of data points in individual time
                series selected by denominatorFilter as well as how to combine the
                retrieved time series together (such as when aggregating multiple
                streams on each resource to a single stream for each resource or when
                aggregating streams across all members of a group of resources).When
                computing ratios, the aggregations and denominator_aggregations fields
                must use the same alignment period and produce time series that have
                the same periodicity and labels.This field is similar to the one in
                the MetricService.ListTimeSeries request. It is advisable to use the
                ListTimeSeries method when debugging this field.
              items:
                $ref: '#/schemas/Aggregation'
              type: array
            denominatorFilter:
              description: A filter that identifies a time series that should be used
                as the denominator of a ratio that will be compared with the threshold.
                If a denominator_filter is specified, the time series specified by
                the filter field will be used as the numerator.The filter is similar
                to the one that is specified in the MetricService.ListTimeSeries request
                (that call is useful to verify the time series that will be retrieved
                / processed) and must specify the metric type and optionally may contain
                restrictions on resource type, resource labels, and metric labels.
                This field may not exceed 2048 Unicode characters in length.
              type: string
            duration:
              description: The amount of time that a time series must violate the
                threshold to be considered failing. Currently, only values that are
                a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported.
                If an invalid value is given, an error will be returned. When choosing
                a duration, it is useful to keep in mind the frequency of the underlying
                time series data (which may also be affected by any alignments specified
                in the aggregations field); a good duration is long enough so that
                a single outlier does not generate spurious alerts, but short enough
                that unhealthy states are detected and alerted on quickly.
              format: google-duration
              type: string
            filter:
              description: A filter that identifies which time series should be compared
                with the threshold.The filter is similar to the one that is specified
                in the MetricService.ListTimeSeries request (that call is useful to
                verify the time series that will be retrieved / processed) and must
                specify the metric type and optionally may contain restrictions on
                resource type, resource labels, and metric labels. This field may
                not exceed 2048 Unicode characters in length.
              type: string
            thresholdValue:
              description: A value against which to compare the time series.
              format: double
              type: number
            trigger:
              $ref: '#/schemas/Trigger'
              description: The number/percent of time series for which the comparison
                must hold in order for the condition to trigger. If unspecified, then
                the condition will trigger if the comparison is true for any of the
                time series that have been identified by filter and aggregations,
                or by the ratio, if denominator_filter and denominator_aggregations
                are specified.
          type: object
        MutationRecord:
          description: Describes a change made to a configuration.
          id: MutationRecord
          properties:
            mutateTime:
              description: When the change occurred.
              format: google-datetime
              type: string
            mutatedBy:
              description: The email address of the user making the change.
              type: string
          type: object
        Status:
          description: 'The Status type defines a logical error model that is suitable
            for different programming environments, including REST APIs and RPC APIs.
            It is used by gRPC (https://github.com/grpc). Each Status message contains
            three pieces of data: error code, error message, and error details.You
            can find out more about this error model and how to work with it in the
            API Design Guide (https://cloud.google.com/apis/design/errors).'
          id: Status
          properties:
            code:
              description: The status code, which should be an enum value of google.rpc.Code.
              format: int32
              type: integer
            details:
              description: A list of messages that carry the error details. There
                is a common set of message types for APIs to use.
              items:
                additionalProperties:
                  description: Properties of the object. Contains field @type with
                    type URL.
                  type: any
                type: object
              type: array
            message:
              description: A developer-facing error message, which should be in English.
                Any user-facing error message should be localized and sent in the
                google.rpc.Status.details field, or localized by the client.
              type: string
          type: object
        Trigger:
          description: 'Specifies how many time series must fail a predicate to trigger
            a condition. If not specified, then a {count: 1} trigger is used.'
          id: Trigger
          properties:
            count:
              description: The absolute number of time series that must fail the predicate
                for the condition to be triggered.
              format: int32
              type: integer
            percent:
              description: The percentage of time series that must fail the predicate
                for the condition to be triggered.
              format: double
              type: number
          type: object
    output:
      $schema: http://json-schema.org/draft-03/schema#
      mainSchema:
        $ref: '#/schemas/AlertPolicy'
      methodName: get
      schemas:
        Aggregation:
          description: Describes how to combine multiple time series to provide different
            views of the data. Aggregation consists of an alignment step on individual
            time series (alignment_period and per_series_aligner) followed by an optional
            reduction step of the data across the aligned time series (cross_series_reducer
            and group_by_fields). For more details, see Aggregation.
          id: Aggregation
          properties:
            alignmentPeriod:
              description: The alignment period for per-time series alignment. If
                present, alignmentPeriod must be at least 60 seconds. After per-time
                series alignment, each time series will contain data points only on
                the period boundaries. If perSeriesAligner is not specified or equals
                ALIGN_NONE, then this field is ignored. If perSeriesAligner is specified
                and does not equal ALIGN_NONE, then this field must be defined; otherwise
                an error is returned.
              format: google-duration
              type: string
            crossSeriesReducer:
              description: The approach to be used to combine time series. Not all
                reducer functions may be applied to all time series, depending on
                the metric type and the value type of the original time series. Reduction
                may change the metric type of value type of the time series.Time series
                data must be aligned in order to perform cross-time series reduction.
                If crossSeriesReducer is specified, then perSeriesAligner must be
                specified and not equal ALIGN_NONE and alignmentPeriod must be specified;
                otherwise, an error is returned.
              enum:
              - REDUCE_NONE
              - REDUCE_MEAN
              - REDUCE_MIN
              - REDUCE_MAX
              - REDUCE_SUM
              - REDUCE_STDDEV
              - REDUCE_COUNT
              - REDUCE_COUNT_TRUE
              - REDUCE_COUNT_FALSE
              - REDUCE_FRACTION_TRUE
              - REDUCE_PERCENTILE_99
              - REDUCE_PERCENTILE_95
              - REDUCE_PERCENTILE_50
              - REDUCE_PERCENTILE_05
              enumDescriptions:
              - No cross-time series reduction. The output of the aligner is returned.
              - Reduce by computing the mean across time series for each alignment
                period. This reducer is valid for delta and gauge metrics with numeric
                or distribution values. The value type of the output is DOUBLE.
              - Reduce by computing the minimum across time series for each alignment
                period. This reducer is valid for delta and gauge metrics with numeric
                values. The value type of the output is the same as the value type
                of the input.
              - Reduce by computing the maximum across time series for each alignment
                period. This reducer is valid for delta and gauge metrics with numeric
                values. The value type of the output is the same as the value type
                of the input.
              - Reduce by computing the sum across time series for each alignment
                period. This reducer is valid for delta and gauge metrics with numeric
                and distribution values. The value type of the output is the same
                as the value type of the input.
              - Reduce by computing the standard deviation across time series for
                each alignment period. This reducer is valid for delta and gauge metrics
                with numeric or distribution values. The value type of the output
                is DOUBLE.
              - Reduce by computing the count of data points across time series for
                each alignment period. This reducer is valid for delta and gauge metrics
                of numeric, Boolean, distribution, and string value type. The value
                type of the output is INT64.
              - Reduce by computing the count of True-valued data points across time
                series for each alignment period. This reducer is valid for delta
                and gauge metrics of Boolean value type. The value type of the output
                is INT64.
              - Reduce by computing the count of False-valued data points across time
                series for each alignment period. This reducer is valid for delta
                and gauge metrics of Boolean value type. The value type of the output
                is INT64.
              - Reduce by computing the fraction of True-valued data points across
                time series for each alignment period. This reducer is valid for delta
                and gauge metrics of Boolean value type. The output value is in the
                range 0, 1 and has value type DOUBLE.
              - Reduce by computing 99th percentile of data points across time series
                for each alignment period. This reducer is valid for gauge and delta
                metrics of numeric and distribution type. The value of the output
                is DOUBLE
              - Reduce by computing 95th percentile of data points across time series
                for each alignment period. This reducer is valid for gauge and delta
                metrics of numeric and distribution type. The value of the output
                is DOUBLE
              - Reduce by computing 50th percentile of data points across time series
                for each alignment period. This reducer is valid for gauge and delta
                metrics of numeric and distribution type. The value of the output
                is DOUBLE
              - Reduce by computing 5th percentile of data points across time series
                for each alignment period. This reducer is valid for gauge and delta
                metrics of numeric and distribution type. The value of the output
                is DOUBLE
              type: string
            groupByFields:
              description: The set of fields to preserve when crossSeriesReducer is
                specified. The groupByFields determine how the time series are partitioned
                into subsets prior to applying the aggregation function. Each subset
                contains time series that have the same value for each of the grouping
                fields. Each individual time series is a member of exactly one subset.
                The crossSeriesReducer is applied to each subset of time series. It
                is not possible to reduce across different resource types, so this
                field implicitly contains resource.type. Fields not specified in groupByFields
                are aggregated away. If groupByFields is not specified and all the
                time series have the same resource type, then the time series are
                aggregated into a single output time series. If crossSeriesReducer
                is not defined, this field is ignored.
              items:
                type: string
              type: array
            perSeriesAligner:
              description: The approach to be used to align individual time series.
                Not all alignment functions may be applied to all time series, depending
                on the metric type and value type of the original time series. Alignment
                may change the metric type or the value type of the time series.Time
                series data must be aligned in order to perform cross-time series
                reduction. If crossSeriesReducer is specified, then perSeriesAligner
                must be specified and not equal ALIGN_NONE and alignmentPeriod must
                be specified; otherwise, an error is returned.
              enum:
              - ALIGN_NONE
              - ALIGN_DELTA
              - ALIGN_RATE
              - ALIGN_INTERPOLATE
              - ALIGN_NEXT_OLDER
              - ALIGN_MIN
              - ALIGN_MAX
              - ALIGN_MEAN
              - ALIGN_COUNT
              - ALIGN_SUM
              - ALIGN_STDDEV
              - ALIGN_COUNT_TRUE
              - ALIGN_COUNT_FALSE
              - ALIGN_FRACTION_TRUE
              - ALIGN_PERCENTILE_99
              - ALIGN_PERCENTILE_95
              - ALIGN_PERCENTILE_50
              - ALIGN_PERCENTILE_05
              - ALIGN_PERCENT_CHANGE
              enumDescriptions:
              - No alignment. Raw data is returned. Not valid if cross-time series
                reduction is requested. The value type of the result is the same as
                the value type of the input.
              - Align and convert to delta metric type. This alignment is valid for
                cumulative metrics and delta metrics. Aligning an existing delta metric
                to a delta metric requires that the alignment period be increased.
                The value type of the result is the same as the value type of the
                input.One can think of this aligner as a rate but without time units;
                that is, the output is conceptually (second_point - first_point).
              - Align and convert to a rate. This alignment is valid for cumulative
                metrics and delta metrics with numeric values. The output is a gauge
                metric with value type DOUBLE.One can think of this aligner as conceptually
                providing the slope of the line that passes through the value at the
                start and end of the window. In other words, this is conceptually
                ((y1 - y0)/(t1 - t0)), and the output unit is one that has a "/time"
                dimension.If, by rate, you are looking for percentage change, see
                the ALIGN_PERCENT_CHANGE aligner option.
              - Align by interpolating between adjacent points around the period boundary.
                This alignment is valid for gauge metrics with numeric values. The
                value type of the result is the same as the value type of the input.
              - Align by shifting the oldest data point before the period boundary
                to the boundary. This alignment is valid for gauge metrics. The value
                type of the result is the same as the value type of the input.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the minimum of all data points in the period.
                This alignment is valid for gauge and delta metrics with numeric values.
                The value type of the result is the same as the value type of the
                input.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the maximum of all data points in the period.
                This alignment is valid for gauge and delta metrics with numeric values.
                The value type of the result is the same as the value type of the
                input.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the average or arithmetic mean of all data points
                in the period. This alignment is valid for gauge and delta metrics
                with numeric values. The value type of the output is DOUBLE.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the count of all data points in the period. This
                alignment is valid for gauge and delta metrics with numeric or Boolean
                values. The value type of the output is INT64.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the sum of all data points in the period. This
                alignment is valid for gauge and delta metrics with numeric and distribution
                values. The value type of the output is the same as the value type
                of the input.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the standard deviation of all data points in the
                period. This alignment is valid for gauge and delta metrics with numeric
                values. The value type of the output is DOUBLE.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the count of True-valued data points in the period.
                This alignment is valid for gauge metrics with Boolean values. The
                value type of the output is INT64.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the count of False-valued data points in the period.
                This alignment is valid for gauge metrics with Boolean values. The
                value type of the output is INT64.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the fraction of True-valued data points in the
                period. This alignment is valid for gauge metrics with Boolean values.
                The output value is in the range 0, 1 and has value type DOUBLE.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the 99th percentile of all data points in the
                period. This alignment is valid for gauge and delta metrics with distribution
                values. The output is a gauge metric with value type DOUBLE.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the 95th percentile of all data points in the
                period. This alignment is valid for gauge and delta metrics with distribution
                values. The output is a gauge metric with value type DOUBLE.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the 50th percentile of all data points in the
                period. This alignment is valid for gauge and delta metrics with distribution
                values. The output is a gauge metric with value type DOUBLE.
              - Align time series via aggregation. The resulting data point in the
                alignment period is the 5th percentile of all data points in the period.
                This alignment is valid for gauge and delta metrics with distribution
                values. The output is a gauge metric with value type DOUBLE.
              - Align and convert to a percentage change. This alignment is valid
                for gauge and delta metrics with numeric values. This alignment conceptually
                computes the equivalent of "((current - previous)/previous)*100" where
                previous value is determined based on the alignmentPeriod. In the
                event that previous is 0 the calculated value is infinity with the
                exception that if both (current - previous) and previous are 0 the
                calculated value is 0. A 10 minute moving mean is computed at each
                point of the time window prior to the above calculation to smooth
                the metric and prevent false positives from very short lived spikes.
                Only applicable for data that is >= 0. Any values < 0 are treated
                as no data. While delta metrics are accepted by this alignment special
                care should be taken that the values for the metric will always be
                positive. The output is a gauge metric with value type DOUBLE.
              type: string
          type: object
        AlertPolicy:
          description: A description of the conditions under which some aspect of
            your system is considered to be "unhealthy" and the ways to notify people
            or services about this state. For an overview of alert policies, see Introduction
            to Alerting.
          id: AlertPolicy
          properties:
            combiner:
              description: How to combine the results of multiple conditions to determine
                if an incident should be opened.
              enum:
              - COMBINE_UNSPECIFIED
              - AND
              - OR
              - AND_WITH_MATCHING_RESOURCE
              enumDescriptions:
              - An unspecified combiner.
              - Combine conditions using the logical AND operator. An incident is
                created only if all conditions are met simultaneously. This combiner
                is satisfied if all conditions are met, even if they are met on completely
                different resources.
              - Combine conditions using the logical OR operator. An incident is created
                if any of the listed conditions is met.
              - Combine conditions using logical AND operator, but unlike the regular
                AND option, an incident is created only if all conditions are met
                simultaneously on at least one resource.
              type: string
            conditions:
              description: A list of conditions for the policy. The conditions are
                combined by AND or OR according to the combiner field. If the combined
                conditions evaluate to true, then an incident is created. A policy
                can have from one to six conditions.
              items:
                $ref: '#/schemas/Condition'
              type: array
            creationRecord:
              $ref: '#/schemas/MutationRecord'
              description: A read-only record of the creation of the alerting policy.
                If provided in a call to create or update, this field will be ignored.
            displayName:
              description: A short name or phrase used to identify the policy in dashboards,
                notifications, and incidents. To avoid confusion, don't use the same
                display name for multiple policies in the same project. The name is
                limited to 512 Unicode characters.
              type: string
            documentation:
              $ref: '#/schemas/Documentation'
              description: Documentation that is included with notifications and incidents
                related to this policy. Best practice is for the documentation to
                include information to help responders understand, mitigate, escalate,
                and correct the underlying problems detected by the alerting policy.
                Notification channels that have limited capacity might not show this
                documentation.
            enabled:
              description: Whether or not the policy is enabled. On write, the default
                interpretation if unset is that the policy is enabled. On read, clients
                should not make any assumption about the state if it has not been
                populated. The field should always be populated on List and Get operations,
                unless a field projection has been specified that strips it out.
              type: boolean
            mutationRecord:
              $ref: '#/schemas/MutationRecord'
              description: A read-only record of the most recent change to the alerting
                policy. If provided in a call to create or update, this field will
                be ignored.
            name:
              description: |-
                Required if the policy exists. The resource name for this policy. The syntax is:
                projects/[PROJECT_ID]/alertPolicies/[ALERT_POLICY_ID]
                [ALERT_POLICY_ID] is assigned by Stackdriver Monitoring when the policy is created. When calling the alertPolicies.create method, do not include the name field in the alerting policy passed as part of the request.
              type: string
            notificationChannels:
              description: |
                Identifies the notification channels to which notifications should be sent when incidents are opened or closed or when new violations occur on an already opened incident. Each element of this array corresponds to the name field in each of the NotificationChannel objects that are returned from the ListNotificationChannels method. The syntax of the entries in this field is:
                projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID]
              items:
                type: string
              type: array
            userLabels:
              additionalProperties:
                type: string
              description: User-supplied key/value data to be used for organizing
                and identifying the AlertPolicy objects.The field can contain up to
                64 entries. Each key and value is limited to 63 Unicode characters
                or 128 bytes, whichever is smaller. Labels and values can contain
                only lowercase letters, numerals, underscores, and dashes. Keys must
                begin with a letter.
              type: object
            validity:
              $ref: '#/schemas/Status'
              description: Read-only description of how the alert policy is invalid.
                OK if the alert policy is valid. If not OK, the alert policy will
                not generate incidents.
          type: object
        Condition:
          description: A condition is a true/false test that determines when an alerting
            policy should open an incident. If a condition evaluates to true, it signifies
            that something is wrong.
          id: Condition
          properties:
            conditionAbsent:
              $ref: '#/schemas/MetricAbsence'
              description: A condition that checks that a time series continues to
                receive new data points.
            conditionThreshold:
              $ref: '#/schemas/MetricThreshold'
              description: A condition that compares a time series against a threshold.
            displayName:
              description: A short name or phrase used to identify the condition in
                dashboards, notifications, and incidents. To avoid confusion, don't
                use the same display name for multiple conditions in the same policy.
              type: string
            name:
              description: |-
                Required if the condition exists. The unique resource name for this condition. Its syntax is:
                projects/[PROJECT_ID]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID]
                [CONDITION_ID] is assigned by Stackdriver Monitoring when the condition is created as part of a new or updated alerting policy.When calling the alertPolicies.create method, do not include the name field in the conditions of the requested alerting policy. Stackdriver Monitoring creates the condition identifiers and includes them in the new policy.When calling the alertPolicies.update method to update a policy, including a condition name causes the existing condition to be updated. Conditions without names are added to the updated policy. Existing conditions are deleted if they are not updated.Best practice is to preserve [CONDITION_ID] if you make only small changes, such as those to condition thresholds, durations, or trigger values. Otherwise, treat the change as a new condition and let the existing condition be deleted.
              type: string
          type: object
        Documentation:
          description: A content string and a MIME type that describes the content
            string's format.
          id: Documentation
          properties:
            content:
              description: The text of the documentation, interpreted according to
                mime_type. The content may not exceed 8,192 Unicode characters and
                may not exceed more than 10,240 bytes when encoded in UTF-8 format,
                whichever is smaller.
              type: string
            mimeType:
              description: The format of the content field. Presently, only the value
                "text/markdown" is supported. See Markdown (https://en.wikipedia.org/wiki/Markdown)
                for more information.
              type: string
          type: object
        MetricAbsence:
          description: A condition type that checks that monitored resources are reporting
            data. The configuration defines a metric and a set of monitored resources.
            The predicate is considered in violation when a time series for the specified
            metric of a monitored resource does not include any data in the specified
            duration.
          id: MetricAbsence
          properties:
            aggregations:
              description: Specifies the alignment of data points in individual time
                series as well as how to combine the retrieved time series together
                (such as when aggregating multiple streams on each resource to a single
                stream for each resource or when aggregating streams across all members
                of a group of resrouces). Multiple aggregations are applied in the
                order specified.This field is similar to the one in the MetricService.ListTimeSeries
                request. It is advisable to use the ListTimeSeries method when debugging
                this field.
              items:
                $ref: '#/schemas/Aggregation'
              type: array
            duration:
              description: The amount of time that a time series must fail to report
                new data to be considered failing. Currently, only values that are
                a multiple of a minute--e.g. 60, 120, or 300 seconds--are supported.
                If an invalid value is given, an error will be returned. The Duration.nanos
                field is ignored.
              format: google-duration
              type: string
            filter:
              description: A filter that identifies which time series should be compared
                with the threshold.The filter is similar to the one that is specified
                in the MetricService.ListTimeSeries request (that call is useful to
                verify the time series that will be retrieved / processed) and must
                specify the metric type and optionally may contain restrictions on
                resource type, resource labels, and metric labels. This field may
                not exceed 2048 Unicode characters in length.
              type: string
            trigger:
              $ref: '#/schemas/Trigger'
              description: The number/percent of time series for which the comparison
                must hold in order for the condition to trigger. If unspecified, then
                the condition will trigger if the comparison is true for any of the
                time series that have been identified by filter and aggregations.
          type: object
        MetricThreshold:
          description: A condition type that compares a collection of time series
            against a threshold.
          id: MetricThreshold
          properties:
            aggregations:
              description: Specifies the alignment of data points in individual time
                series as well as how to combine the retrieved time series together
                (such as when aggregating multiple streams on each resource to a single
                stream for each resource or when aggregating streams across all members
                of a group of resrouces). Multiple aggregations are applied in the
                order specified.This field is similar to the one in the MetricService.ListTimeSeries
                request. It is advisable to use the ListTimeSeries method when debugging
                this field.
              items:
                $ref: '#/schemas/Aggregation'
              type: array
            comparison:
              description: The comparison to apply between the time series (indicated
                by filter and aggregation) and the threshold (indicated by threshold_value).
                The comparison is applied on each time series, with the time series
                on the left-hand side and the threshold on the right-hand side.Only
                COMPARISON_LT and COMPARISON_GT are supported currently.
              enum:
              - COMPARISON_UNSPECIFIED
              - COMPARISON_GT
              - COMPARISON_GE
              - COMPARISON_LT
              - COMPARISON_LE
              - COMPARISON_EQ
              - COMPARISON_NE
              enumDescriptions:
              - No ordering relationship is specified.
              - The left argument is greater than the right argument.
              - The left argument is greater than or equal to the right argument.
              - The left argument is less than the right argument.
              - The left argument is less than or equal to the right argument.
              - The left argument is equal to the right argument.
              - The left argument is not equal to the right argument.
              type: string
            denominatorAggregations:
              description: Specifies the alignment of data points in individual time
                series selected by denominatorFilter as well as how to combine the
                retrieved time series together (such as when aggregating multiple
                streams on each resource to a single stream for each resource or when
                aggregating streams across all members of a group of resources).When
                computing ratios, the aggregations and denominator_aggregations fields
                must use the same alignment period and produce time series that have
                the same periodicity and labels.This field is similar to the one in
                the MetricService.ListTimeSeries request. It is advisable to use the
                ListTimeSeries method when debugging this field.
              items:
                $ref: '#/schemas/Aggregation'
              type: array
            denominatorFilter:
              description: A filter that identifies a time series that should be used
                as the denominator of a ratio that will be compared with the threshold.
                If a denominator_filter is specified, the time series specified by
                the filter field will be used as the numerator.The filter is similar
                to the one that is specified in the MetricService.ListTimeSeries request
                (that call is useful to verify the time series that will be retrieved
                / processed) and must specify the metric type and optionally may contain
                restrictions on resource type, resource labels, and metric labels.
                This field may not exceed 2048 Unicode characters in length.
              type: string
            duration:
              description: The amount of time that a time series must violate the
                threshold to be considered failing. Currently, only values that are
                a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported.
                If an invalid value is given, an error will be returned. When choosing
                a duration, it is useful to keep in mind the frequency of the underlying
                time series data (which may also be affected by any alignments specified
                in the aggregations field); a good duration is long enough so that
                a single outlier does not generate spurious alerts, but short enough
                that unhealthy states are detected and alerted on quickly.
              format: google-duration
              type: string
            filter:
              description: A filter that identifies which time series should be compared
                with the threshold.The filter is similar to the one that is specified
                in the MetricService.ListTimeSeries request (that call is useful to
                verify the time series that will be retrieved / processed) and must
                specify the metric type and optionally may contain restrictions on
                resource type, resource labels, and metric labels. This field may
                not exceed 2048 Unicode characters in length.
              type: string
            thresholdValue:
              description: A value against which to compare the time series.
              format: double
              type: number
            trigger:
              $ref: '#/schemas/Trigger'
              description: The number/percent of time series for which the comparison
                must hold in order for the condition to trigger. If unspecified, then
                the condition will trigger if the comparison is true for any of the
                time series that have been identified by filter and aggregations,
                or by the ratio, if denominator_filter and denominator_aggregations
                are specified.
          type: object
        MutationRecord:
          description: Describes a change made to a configuration.
          id: MutationRecord
          properties:
            mutateTime:
              description: When the change occurred.
              format: google-datetime
              type: string
            mutatedBy:
              description: The email address of the user making the change.
              type: string
          type: object
        Status:
          description: 'The Status type defines a logical error model that is suitable
            for different programming environments, including REST APIs and RPC APIs.
            It is used by gRPC (https://github.com/grpc). Each Status message contains
            three pieces of data: error code, error message, and error details.You
            can find out more about this error model and how to work with it in the
            API Design Guide (https://cloud.google.com/apis/design/errors).'
          id: Status
          properties:
            code:
              description: The status code, which should be an enum value of google.rpc.Code.
              format: int32
              type: integer
            details:
              description: A list of messages that carry the error details. There
                is a common set of message types for APIs to use.
              items:
                additionalProperties:
                  description: Properties of the object. Contains field @type with
                    type URL.
                  type: any
                type: object
              type: array
            message:
              description: A developer-facing error message, which should be in English.
                Any user-facing error message should be localized and sent in the
                google.rpc.Status.details field, or localized by the client.
              type: string
          type: object
        Trigger:
          description: 'Specifies how many time series must fail a predicate to trigger
            a condition. If not specified, then a {count: 1} trigger is used.'
          id: Trigger
          properties:
            count:
              description: The absolute number of time series that must fail the predicate
                for the condition to be triggered.
              format: int32
              type: integer
            percent:
              description: The percentage of time series that must fail the predicate
                for the condition to be triggered.
              format: double
              type: number
          type: object
  selfLink: https://www.googleapis.com/deploymentmanager/v2beta/projects/gcp-types/global/typeProviders/monitoring-v3/types/projects.alertPolicies?alt=json
  title: Stackdriver Monitoring API
