type_info:
  documentationLink: https://cloud.google.com/resource-manager
  kind: deploymentmanager#typeInfo
  name: virtual.folders.iamMemberBinding
  schema:
    input:
      $schema: http://json-schema.org/draft-03/schema#
      methodName: setIamPolicy
      schemas:
        AuditConfig:
          description: |-
            Specifies the audit configuration for a service.
            The configuration determines which permission types are logged, and what
            identities, if any, are exempted from logging.
            An AuditConfig must have one or more AuditLogConfigs.

            If there are AuditConfigs for both `allServices` and a specific service,
            the union of the two AuditConfigs is used for that service: the log_types
            specified in each AuditConfig are enabled, and the exempted_members in each
            AuditLogConfig are exempted.

            Example Policy with multiple AuditConfigs:

                {
                  "audit_configs": [
                    {
                      "service": "allServices"
                      "audit_log_configs": [
                        {
                          "log_type": "DATA_READ",
                          "exempted_members": [
                            "user:jose@example.com"
                          ]
                        },
                        {
                          "log_type": "DATA_WRITE",
                        },
                        {
                          "log_type": "ADMIN_READ",
                        }
                      ]
                    },
                    {
                      "service": "sampleservice.googleapis.com"
                      "audit_log_configs": [
                        {
                          "log_type": "DATA_READ",
                        },
                        {
                          "log_type": "DATA_WRITE",
                          "exempted_members": [
                            "user:aliya@example.com"
                          ]
                        }
                      ]
                    }
                  ]
                }

            For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
            logging. It also exempts jose@example.com from DATA_READ logging, and
            aliya@example.com from DATA_WRITE logging.
          id: AuditConfig
          properties:
            auditLogConfigs:
              description: The configuration for logging of each type of permission.
              items:
                $ref: '#/schemas/AuditLogConfig'
              type: array
            service:
              description: |-
                Specifies a service that will be enabled for audit logging.
                For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
                `allServices` is a special value that covers all services.
              type: string
          type: object
        AuditLogConfig:
          description: |-
            Provides the configuration for logging a type of permissions.
            Example:

                {
                  "audit_log_configs": [
                    {
                      "log_type": "DATA_READ",
                      "exempted_members": [
                        "user:jose@example.com"
                      ]
                    },
                    {
                      "log_type": "DATA_WRITE",
                    }
                  ]
                }

            This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting
            jose@example.com from DATA_READ logging.
          id: AuditLogConfig
          properties:
            exemptedMembers:
              description: |-
                Specifies the identities that do not cause logging for this type of
                permission.
                Follows the same format of Binding.members.
              items:
                type: string
              type: array
            logType:
              description: The log type that this config enables.
              enum:
              - LOG_TYPE_UNSPECIFIED
              - ADMIN_READ
              - DATA_WRITE
              - DATA_READ
              enumDescriptions:
              - Default case. Should never be this.
              - 'Admin reads. Example: CloudIAM getIamPolicy'
              - 'Data writes. Example: CloudSQL Users create'
              - 'Data reads. Example: CloudSQL Users list'
              type: string
          type: object
        Binding:
          description: Associates `members` with a `role`.
          id: Binding
          properties:
            condition:
              $ref: '#/schemas/Expr'
              description: |-
                The condition that is associated with this binding.
                NOTE: An unsatisfied condition will not allow user access via current
                binding. Different bindings, including their conditions, are examined
                independently.
            members:
              description: |+
                Specifies the identities requesting access for a Cloud Platform resource.
                `members` can have the following values:

                * `allUsers`: A special identifier that represents anyone who is
                   on the internet; with or without a Google account.

                * `allAuthenticatedUsers`: A special identifier that represents anyone
                   who is authenticated with a Google account or a service account.

                * `user:{emailid}`: An email address that represents a specific Google
                   account. For example, `alice@example.com` .


                * `serviceAccount:{emailid}`: An email address that represents a service
                   account. For example, `my-other-app@appspot.gserviceaccount.com`.

                * `group:{emailid}`: An email address that represents a Google group.
                   For example, `admins@example.com`.


                * `domain:{domain}`: The G Suite domain (primary) that represents all the
                   users of that domain. For example, `google.com` or `example.com`.

              items:
                type: string
              type: array
            role:
              description: |-
                Role that is assigned to `members`.
                For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
              type: string
          type: object
        Expr:
          description: |-
            Represents an expression text. Example:

                title: "User account presence"
                description: "Determines whether the request has a user account"
                expression: "size(request.user) > 0"
          id: Expr
          properties:
            description:
              description: |-
                An optional description of the expression. This is a longer text which
                describes the expression, e.g. when hovered over it in a UI.
              type: string
            expression:
              description: |-
                Textual representation of an expression in
                Common Expression Language syntax.

                The application context of the containing message determines which
                well-known feature set of CEL is supported.
              type: string
            location:
              description: |-
                An optional string indicating the location of the expression for error
                reporting, e.g. a file name and a position in the file.
              type: string
            title:
              description: |-
                An optional title for the expression, i.e. a short string describing
                its purpose. This can be used e.g. in UIs which allow to enter the
                expression.
              type: string
          type: object
        Policy:
          description: |-
            Defines an Identity and Access Management (IAM) policy. It is used to
            specify access control policies for Cloud Platform resources.


            A `Policy` consists of a list of `bindings`. A `binding` binds a list of
            `members` to a `role`, where the members can be user accounts, Google groups,
            Google domains, and service accounts. A `role` is a named list of permissions
            defined by IAM.

            **JSON Example**

                {
                  "bindings": [
                    {
                      "role": "roles/owner",
                      "members": [
                        "user:mike@example.com",
                        "group:admins@example.com",
                        "domain:google.com",
                        "serviceAccount:my-other-app@appspot.gserviceaccount.com"
                      ]
                    },
                    {
                      "role": "roles/viewer",
                      "members": ["user:sean@example.com"]
                    }
                  ]
                }

            **YAML Example**

                bindings:
                - members:
                  - user:mike@example.com
                  - group:admins@example.com
                  - domain:google.com
                  - serviceAccount:my-other-app@appspot.gserviceaccount.com
                  role: roles/owner
                - members:
                  - user:sean@example.com
                  role: roles/viewer


            For a description of IAM and its features, see the
            [IAM developer's guide](https://cloud.google.com/iam/docs).
          id: Policy
          properties:
            auditConfigs:
              description: Specifies cloud audit logging configuration for this policy.
              items:
                $ref: '#/schemas/AuditConfig'
              type: array
            bindings:
              description: |-
                Associates a list of `members` to a `role`.
                `bindings` with no members will result in an error.
              items:
                $ref: '#/schemas/Binding'
              type: array
            etag:
              description: |-
                `etag` is used for optimistic concurrency control as a way to help
                prevent simultaneous updates of a policy from overwriting each other.
                It is strongly suggested that systems make use of the `etag` in the
                read-modify-write cycle to perform policy updates in order to avoid race
                conditions: An `etag` is returned in the response to `getIamPolicy`, and
                systems are expected to put that etag in the request to `setIamPolicy` to
                ensure that their change will be applied to the same version of the policy.

                If no `etag` is provided in the call to `setIamPolicy`, then the existing
                policy is overwritten.
              format: byte
              type: string
            version:
              description: Deprecated.
              format: int32
              type: integer
          type: object
        SetIamPolicyRequest:
          description: Request message for `SetIamPolicy` method.
          id: SetIamPolicyRequest
          properties:
            policy:
              $ref: '#/schemas/Policy'
              description: |-
                REQUIRED: The complete policy to be applied to the `resource`. The size of
                the policy is limited to a few 10s of KB. An empty policy is a
                valid policy but certain Cloud Platform services (such as Projects)
                might reject them.
            updateMask:
              description: |-
                OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
                the fields in the mask will be modified. If no mask is provided, the
                following default mask is used:
                paths: "bindings, etag"
                This field is only used by Cloud IAM.
              format: google-fieldmask
              type: string
          type: object
      setIamPolicy:
        properties:
          policy:
            $ref: '#/schemas/Policy'
            description: |-
              REQUIRED: The complete policy to be applied to the `resource`. The size of
              the policy is limited to a few 10s of KB. An empty policy is a
              valid policy but certain Cloud Platform services (such as Projects)
              might reject them.
          resource:
            description: |-
              REQUIRED: The resource for which the policy is being specified.
              See the operation documentation for the appropriate value for this field.
            location: path
            pattern: ^folders/[^/]+$
            required: true
            type: string
          updateMask:
            description: |-
              OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
              the fields in the mask will be modified. If no mask is provided, the
              following default mask is used:
              paths: "bindings, etag"
              This field is only used by Cloud IAM.
            format: google-fieldmask
            type: string
        type: object
    output:
      $schema: http://json-schema.org/draft-03/schema#
      getIamPolicy:
        description: |-
          Defines an Identity and Access Management (IAM) policy. It is used to
          specify access control policies for Cloud Platform resources.


          A `Policy` consists of a list of `bindings`. A `binding` binds a list of
          `members` to a `role`, where the members can be user accounts, Google groups,
          Google domains, and service accounts. A `role` is a named list of permissions
          defined by IAM.

          **JSON Example**

              {
                "bindings": [
                  {
                    "role": "roles/owner",
                    "members": [
                      "user:mike@example.com",
                      "group:admins@example.com",
                      "domain:google.com",
                      "serviceAccount:my-other-app@appspot.gserviceaccount.com"
                    ]
                  },
                  {
                    "role": "roles/viewer",
                    "members": ["user:sean@example.com"]
                  }
                ]
              }

          **YAML Example**

              bindings:
              - members:
                - user:mike@example.com
                - group:admins@example.com
                - domain:google.com
                - serviceAccount:my-other-app@appspot.gserviceaccount.com
                role: roles/owner
              - members:
                - user:sean@example.com
                role: roles/viewer


          For a description of IAM and its features, see the
          [IAM developer's guide](https://cloud.google.com/iam/docs).
        id: Policy
        properties:
          auditConfigs:
            description: Specifies cloud audit logging configuration for this policy.
            items:
              $ref: '#/schemas/AuditConfig'
            type: array
          bindings:
            description: |-
              Associates a list of `members` to a `role`.
              `bindings` with no members will result in an error.
            items:
              $ref: '#/schemas/Binding'
            type: array
          etag:
            description: |-
              `etag` is used for optimistic concurrency control as a way to help
              prevent simultaneous updates of a policy from overwriting each other.
              It is strongly suggested that systems make use of the `etag` in the
              read-modify-write cycle to perform policy updates in order to avoid race
              conditions: An `etag` is returned in the response to `getIamPolicy`, and
              systems are expected to put that etag in the request to `setIamPolicy` to
              ensure that their change will be applied to the same version of the policy.

              If no `etag` is provided in the call to `setIamPolicy`, then the existing
              policy is overwritten.
            format: byte
            type: string
          version:
            description: Deprecated.
            format: int32
            type: integer
        type: object
      methodName: getIamPolicy
      schemas:
        AuditConfig:
          description: |-
            Specifies the audit configuration for a service.
            The configuration determines which permission types are logged, and what
            identities, if any, are exempted from logging.
            An AuditConfig must have one or more AuditLogConfigs.

            If there are AuditConfigs for both `allServices` and a specific service,
            the union of the two AuditConfigs is used for that service: the log_types
            specified in each AuditConfig are enabled, and the exempted_members in each
            AuditLogConfig are exempted.

            Example Policy with multiple AuditConfigs:

                {
                  "audit_configs": [
                    {
                      "service": "allServices"
                      "audit_log_configs": [
                        {
                          "log_type": "DATA_READ",
                          "exempted_members": [
                            "user:jose@example.com"
                          ]
                        },
                        {
                          "log_type": "DATA_WRITE",
                        },
                        {
                          "log_type": "ADMIN_READ",
                        }
                      ]
                    },
                    {
                      "service": "sampleservice.googleapis.com"
                      "audit_log_configs": [
                        {
                          "log_type": "DATA_READ",
                        },
                        {
                          "log_type": "DATA_WRITE",
                          "exempted_members": [
                            "user:aliya@example.com"
                          ]
                        }
                      ]
                    }
                  ]
                }

            For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
            logging. It also exempts jose@example.com from DATA_READ logging, and
            aliya@example.com from DATA_WRITE logging.
          id: AuditConfig
          properties:
            auditLogConfigs:
              description: The configuration for logging of each type of permission.
              items:
                $ref: '#/schemas/AuditLogConfig'
              type: array
            service:
              description: |-
                Specifies a service that will be enabled for audit logging.
                For example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
                `allServices` is a special value that covers all services.
              type: string
          type: object
        AuditLogConfig:
          description: |-
            Provides the configuration for logging a type of permissions.
            Example:

                {
                  "audit_log_configs": [
                    {
                      "log_type": "DATA_READ",
                      "exempted_members": [
                        "user:jose@example.com"
                      ]
                    },
                    {
                      "log_type": "DATA_WRITE",
                    }
                  ]
                }

            This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting
            jose@example.com from DATA_READ logging.
          id: AuditLogConfig
          properties:
            exemptedMembers:
              description: |-
                Specifies the identities that do not cause logging for this type of
                permission.
                Follows the same format of Binding.members.
              items:
                type: string
              type: array
            logType:
              description: The log type that this config enables.
              enum:
              - LOG_TYPE_UNSPECIFIED
              - ADMIN_READ
              - DATA_WRITE
              - DATA_READ
              enumDescriptions:
              - Default case. Should never be this.
              - 'Admin reads. Example: CloudIAM getIamPolicy'
              - 'Data writes. Example: CloudSQL Users create'
              - 'Data reads. Example: CloudSQL Users list'
              type: string
          type: object
        Binding:
          description: Associates `members` with a `role`.
          id: Binding
          properties:
            condition:
              $ref: '#/schemas/Expr'
              description: |-
                The condition that is associated with this binding.
                NOTE: An unsatisfied condition will not allow user access via current
                binding. Different bindings, including their conditions, are examined
                independently.
            members:
              description: |+
                Specifies the identities requesting access for a Cloud Platform resource.
                `members` can have the following values:

                * `allUsers`: A special identifier that represents anyone who is
                   on the internet; with or without a Google account.

                * `allAuthenticatedUsers`: A special identifier that represents anyone
                   who is authenticated with a Google account or a service account.

                * `user:{emailid}`: An email address that represents a specific Google
                   account. For example, `alice@example.com` .


                * `serviceAccount:{emailid}`: An email address that represents a service
                   account. For example, `my-other-app@appspot.gserviceaccount.com`.

                * `group:{emailid}`: An email address that represents a Google group.
                   For example, `admins@example.com`.


                * `domain:{domain}`: The G Suite domain (primary) that represents all the
                   users of that domain. For example, `google.com` or `example.com`.

              items:
                type: string
              type: array
            role:
              description: |-
                Role that is assigned to `members`.
                For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
              type: string
          type: object
        Expr:
          description: |-
            Represents an expression text. Example:

                title: "User account presence"
                description: "Determines whether the request has a user account"
                expression: "size(request.user) > 0"
          id: Expr
          properties:
            description:
              description: |-
                An optional description of the expression. This is a longer text which
                describes the expression, e.g. when hovered over it in a UI.
              type: string
            expression:
              description: |-
                Textual representation of an expression in
                Common Expression Language syntax.

                The application context of the containing message determines which
                well-known feature set of CEL is supported.
              type: string
            location:
              description: |-
                An optional string indicating the location of the expression for error
                reporting, e.g. a file name and a position in the file.
              type: string
            title:
              description: |-
                An optional title for the expression, i.e. a short string describing
                its purpose. This can be used e.g. in UIs which allow to enter the
                expression.
              type: string
          type: object
        Policy:
          description: |-
            Defines an Identity and Access Management (IAM) policy. It is used to
            specify access control policies for Cloud Platform resources.


            A `Policy` consists of a list of `bindings`. A `binding` binds a list of
            `members` to a `role`, where the members can be user accounts, Google groups,
            Google domains, and service accounts. A `role` is a named list of permissions
            defined by IAM.

            **JSON Example**

                {
                  "bindings": [
                    {
                      "role": "roles/owner",
                      "members": [
                        "user:mike@example.com",
                        "group:admins@example.com",
                        "domain:google.com",
                        "serviceAccount:my-other-app@appspot.gserviceaccount.com"
                      ]
                    },
                    {
                      "role": "roles/viewer",
                      "members": ["user:sean@example.com"]
                    }
                  ]
                }

            **YAML Example**

                bindings:
                - members:
                  - user:mike@example.com
                  - group:admins@example.com
                  - domain:google.com
                  - serviceAccount:my-other-app@appspot.gserviceaccount.com
                  role: roles/owner
                - members:
                  - user:sean@example.com
                  role: roles/viewer


            For a description of IAM and its features, see the
            [IAM developer's guide](https://cloud.google.com/iam/docs).
          id: Policy
          properties:
            auditConfigs:
              description: Specifies cloud audit logging configuration for this policy.
              items:
                $ref: '#/schemas/AuditConfig'
              type: array
            bindings:
              description: |-
                Associates a list of `members` to a `role`.
                `bindings` with no members will result in an error.
              items:
                $ref: '#/schemas/Binding'
              type: array
            etag:
              description: |-
                `etag` is used for optimistic concurrency control as a way to help
                prevent simultaneous updates of a policy from overwriting each other.
                It is strongly suggested that systems make use of the `etag` in the
                read-modify-write cycle to perform policy updates in order to avoid race
                conditions: An `etag` is returned in the response to `getIamPolicy`, and
                systems are expected to put that etag in the request to `setIamPolicy` to
                ensure that their change will be applied to the same version of the policy.

                If no `etag` is provided in the call to `setIamPolicy`, then the existing
                policy is overwritten.
              format: byte
              type: string
            version:
              description: Deprecated.
              format: int32
              type: integer
          type: object
  selfLink: https://www.googleapis.com/deploymentmanager/v2beta/projects/gcp-types/global/typeProviders/cloudresourcemanager-v2/types/virtual.folders.iamMemberBinding?alt=json
  title: Cloud Resource Manager API
