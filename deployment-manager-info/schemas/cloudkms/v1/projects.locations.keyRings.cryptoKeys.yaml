type_info:
  documentationLink: https://cloud.google.com/kms/
  kind: deploymentmanager#typeInfo
  name: projects.locations.keyRings.cryptoKeys
  schema:
    input:
      $schema: http://json-schema.org/draft-03/schema#
      create:
        properties:
          cryptoKeyId:
            description: |-
              Required. It must be unique within a KeyRing and match the regular
              expression `[a-zA-Z0-9_-]{1,63}`
            location: query
            type: string
          labels:
            additionalProperties:
              type: string
            description: |-
              Labels with user-defined metadata. For more information, see
              [Labeling Keys](/kms/docs/labeling-keys).
            type: object
          name:
            description: |-
              Output only. The resource name for this CryptoKey in the format
              `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
            type: string
          nextRotationTime:
            description: |-
              At next_rotation_time, the Key Management Service will automatically:

              1. Create a new version of this CryptoKey.
              2. Mark the new version as primary.

              Key rotations performed manually via
              CreateCryptoKeyVersion and
              UpdateCryptoKeyPrimaryVersion
              do not affect next_rotation_time.

              Keys with purpose
              ENCRYPT_DECRYPT support
              automatic rotation. For other keys, this field must be omitted.
            format: google-datetime
            type: string
          parent:
            description: |-
              Required. The name of the KeyRing associated with the
              CryptoKeys.
            location: path
            pattern: ^projects/[^/]+/locations/[^/]+/keyRings/[^/]+$
            required: true
            type: string
          primary:
            $ref: '#/schemas/CryptoKeyVersion'
            description: |-
              Output only. A copy of the "primary" CryptoKeyVersion that will be used
              by Encrypt when this CryptoKey is given
              in EncryptRequest.name.

              The CryptoKey's primary version can be updated via
              UpdateCryptoKeyPrimaryVersion.

              All keys with purpose
              ENCRYPT_DECRYPT have a
              primary. For other keys, this field will be omitted.
          purpose:
            description: The immutable purpose of this CryptoKey.
            enum:
            - CRYPTO_KEY_PURPOSE_UNSPECIFIED
            - ENCRYPT_DECRYPT
            - ASYMMETRIC_SIGN
            - ASYMMETRIC_DECRYPT
            enumDescriptions:
            - Not specified.
            - |-
              CryptoKeys with this purpose may be used with
              Encrypt and
              Decrypt.
            - |-
              CryptoKeys with this purpose may be used with
              AsymmetricSign and
              GetPublicKey.
            - |-
              CryptoKeys with this purpose may be used with
              AsymmetricDecrypt and
              GetPublicKey.
            type: string
          rotationPeriod:
            description: |-
              next_rotation_time will be advanced by this period when the service
              automatically rotates a key. Must be at least 24 hours and at most
              876,000 hours.

              If rotation_period is set, next_rotation_time must also be set.

              Keys with purpose
              ENCRYPT_DECRYPT support
              automatic rotation. For other keys, this field must be omitted.
            format: google-duration
            type: string
          skipInitialVersionCreation:
            description: |-
              If set to true, the request will create a CryptoKey without any
              CryptoKeyVersions. You must manually call
              CreateCryptoKeyVersion or
              ImportCryptoKeyVersion
              before you can use this CryptoKey.
            location: query
            type: boolean
          versionTemplate:
            $ref: '#/schemas/CryptoKeyVersionTemplate'
            description: |-
              A template describing settings for new CryptoKeyVersion instances.
              The properties of new CryptoKeyVersion instances created by either
              CreateCryptoKeyVersion or
              auto-rotation are controlled by this template.
        type: object
      methodName: create
      schemas:
        CryptoKey:
          description: |-
            A CryptoKey represents a logical key that can be used for cryptographic
            operations.

            A CryptoKey is made up of one or more versions, which
            represent the actual key material used in cryptographic operations.
          id: CryptoKey
          properties:
            labels:
              additionalProperties:
                type: string
              description: |-
                Labels with user-defined metadata. For more information, see
                [Labeling Keys](/kms/docs/labeling-keys).
              type: object
            name:
              description: |-
                Output only. The resource name for this CryptoKey in the format
                `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
              type: string
            nextRotationTime:
              description: |-
                At next_rotation_time, the Key Management Service will automatically:

                1. Create a new version of this CryptoKey.
                2. Mark the new version as primary.

                Key rotations performed manually via
                CreateCryptoKeyVersion and
                UpdateCryptoKeyPrimaryVersion
                do not affect next_rotation_time.

                Keys with purpose
                ENCRYPT_DECRYPT support
                automatic rotation. For other keys, this field must be omitted.
              format: google-datetime
              type: string
            primary:
              $ref: '#/schemas/CryptoKeyVersion'
              description: |-
                Output only. A copy of the "primary" CryptoKeyVersion that will be used
                by Encrypt when this CryptoKey is given
                in EncryptRequest.name.

                The CryptoKey's primary version can be updated via
                UpdateCryptoKeyPrimaryVersion.

                All keys with purpose
                ENCRYPT_DECRYPT have a
                primary. For other keys, this field will be omitted.
            purpose:
              description: The immutable purpose of this CryptoKey.
              enum:
              - CRYPTO_KEY_PURPOSE_UNSPECIFIED
              - ENCRYPT_DECRYPT
              - ASYMMETRIC_SIGN
              - ASYMMETRIC_DECRYPT
              enumDescriptions:
              - Not specified.
              - |-
                CryptoKeys with this purpose may be used with
                Encrypt and
                Decrypt.
              - |-
                CryptoKeys with this purpose may be used with
                AsymmetricSign and
                GetPublicKey.
              - |-
                CryptoKeys with this purpose may be used with
                AsymmetricDecrypt and
                GetPublicKey.
              type: string
            rotationPeriod:
              description: |-
                next_rotation_time will be advanced by this period when the service
                automatically rotates a key. Must be at least 24 hours and at most
                876,000 hours.

                If rotation_period is set, next_rotation_time must also be set.

                Keys with purpose
                ENCRYPT_DECRYPT support
                automatic rotation. For other keys, this field must be omitted.
              format: google-duration
              type: string
            versionTemplate:
              $ref: '#/schemas/CryptoKeyVersionTemplate'
              description: |-
                A template describing settings for new CryptoKeyVersion instances.
                The properties of new CryptoKeyVersion instances created by either
                CreateCryptoKeyVersion or
                auto-rotation are controlled by this template.
          type: object
        CryptoKeyVersion:
          description: |-
            A CryptoKeyVersion represents an individual cryptographic key, and the
            associated key material.

            An ENABLED version can be
            used for cryptographic operations.

            For security reasons, the raw cryptographic key material represented by a
            CryptoKeyVersion can never be viewed or exported. It can only be used to
            encrypt, decrypt, or sign data when an authorized user or application invokes
            Cloud KMS.
          id: CryptoKeyVersion
          properties:
            algorithm:
              description: |-
                Output only. The CryptoKeyVersionAlgorithm that this
                CryptoKeyVersion supports.
              enum:
              - CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED
              - GOOGLE_SYMMETRIC_ENCRYPTION
              - RSA_SIGN_PSS_2048_SHA256
              - RSA_SIGN_PSS_3072_SHA256
              - RSA_SIGN_PSS_4096_SHA256
              - RSA_SIGN_PSS_4096_SHA512
              - RSA_SIGN_PKCS1_2048_SHA256
              - RSA_SIGN_PKCS1_3072_SHA256
              - RSA_SIGN_PKCS1_4096_SHA256
              - RSA_SIGN_PKCS1_4096_SHA512
              - RSA_DECRYPT_OAEP_2048_SHA256
              - RSA_DECRYPT_OAEP_3072_SHA256
              - RSA_DECRYPT_OAEP_4096_SHA256
              - RSA_DECRYPT_OAEP_4096_SHA512
              - EC_SIGN_P256_SHA256
              - EC_SIGN_P384_SHA384
              enumDescriptions:
              - Not specified.
              - Creates symmetric encryption keys.
              - RSASSA-PSS 2048 bit key with a SHA256 digest.
              - RSASSA-PSS 3072 bit key with a SHA256 digest.
              - RSASSA-PSS 4096 bit key with a SHA256 digest.
              - RSASSA-PSS 4096 bit key with a SHA512 digest.
              - RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.
              - RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.
              - RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.
              - RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.
              - RSAES-OAEP 2048 bit key with a SHA256 digest.
              - RSAES-OAEP 3072 bit key with a SHA256 digest.
              - RSAES-OAEP 4096 bit key with a SHA256 digest.
              - RSAES-OAEP 4096 bit key with a SHA512 digest.
              - ECDSA on the NIST P-256 curve with a SHA256 digest.
              - ECDSA on the NIST P-384 curve with a SHA384 digest.
              type: string
            attestation:
              $ref: '#/schemas/KeyOperationAttestation'
              description: |-
                Output only. Statement that was generated and signed by the HSM at key
                creation time. Use this statement to verify attributes of the key as stored
                on the HSM, independently of Google. Only provided for key versions with
                protection_level HSM.
            destroyEventTime:
              description: |-
                Output only. The time this CryptoKeyVersion's key material was
                destroyed. Only present if state is
                DESTROYED.
              format: google-datetime
              type: string
            destroyTime:
              description: |-
                Output only. The time this CryptoKeyVersion's key material is scheduled
                for destruction. Only present if state is
                DESTROY_SCHEDULED.
              format: google-datetime
              type: string
            generateTime:
              description: |-
                Output only. The time this CryptoKeyVersion's key material was
                generated.
              format: google-datetime
              type: string
            importFailureReason:
              description: |-
                Output only. The root cause of an import failure. Only present if
                state is
                IMPORT_FAILED.
              type: string
            importJob:
              description: |-
                Output only. The name of the ImportJob used to import this
                CryptoKeyVersion. Only present if the underlying key material was
                imported.
              type: string
            importTime:
              description: |-
                Output only. The time at which this CryptoKeyVersion's key material
                was imported.
              format: google-datetime
              type: string
            name:
              description: |-
                Output only. The resource name for this CryptoKeyVersion in the format
                `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.
              type: string
            protectionLevel:
              description: |-
                Output only. The ProtectionLevel describing how crypto operations are
                performed with this CryptoKeyVersion.
              enum:
              - PROTECTION_LEVEL_UNSPECIFIED
              - SOFTWARE
              - HSM
              enumDescriptions:
              - Not specified.
              - Crypto operations are performed in software.
              - Crypto operations are performed in a Hardware Security Module.
              type: string
            state:
              description: The current state of the CryptoKeyVersion.
              enum:
              - CRYPTO_KEY_VERSION_STATE_UNSPECIFIED
              - PENDING_GENERATION
              - ENABLED
              - DISABLED
              - DESTROYED
              - DESTROY_SCHEDULED
              - PENDING_IMPORT
              - IMPORT_FAILED
              enumDescriptions:
              - Not specified.
              - |-
                This version is still being generated. It may not be used, enabled,
                disabled, or destroyed yet. Cloud KMS will automatically mark this
                version ENABLED as soon as the version is ready.
              - This version may be used for cryptographic operations.
              - |-
                This version may not be used, but the key material is still available,
                and the version can be placed back into the ENABLED state.
              - |-
                This version is destroyed, and the key material is no longer stored.
                A version may not leave this state once entered.
              - |-
                This version is scheduled for destruction, and will be destroyed soon.
                Call
                RestoreCryptoKeyVersion
                to put it back into the DISABLED state.
              - |-
                This version is still being imported. It may not be used, enabled,
                disabled, or destroyed yet. Cloud KMS will automatically mark this
                version ENABLED as soon as the version is ready.
              - |-
                This version was not imported successfully. It may not be used, enabled,
                disabled, or destroyed. The submitted key material has been discarded.
                Additional details can be found in
                CryptoKeyVersion.import_failure_reason.
              type: string
          type: object
        CryptoKeyVersionTemplate:
          description: |-
            A CryptoKeyVersionTemplate specifies the properties to use when creating
            a new CryptoKeyVersion, either manually with
            CreateCryptoKeyVersion or
            automatically as a result of auto-rotation.
          id: CryptoKeyVersionTemplate
          properties:
            algorithm:
              description: |-
                Required. Algorithm to use
                when creating a CryptoKeyVersion based on this template.

                For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is implied if both
                this field is omitted and CryptoKey.purpose is
                ENCRYPT_DECRYPT.
              enum:
              - CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED
              - GOOGLE_SYMMETRIC_ENCRYPTION
              - RSA_SIGN_PSS_2048_SHA256
              - RSA_SIGN_PSS_3072_SHA256
              - RSA_SIGN_PSS_4096_SHA256
              - RSA_SIGN_PSS_4096_SHA512
              - RSA_SIGN_PKCS1_2048_SHA256
              - RSA_SIGN_PKCS1_3072_SHA256
              - RSA_SIGN_PKCS1_4096_SHA256
              - RSA_SIGN_PKCS1_4096_SHA512
              - RSA_DECRYPT_OAEP_2048_SHA256
              - RSA_DECRYPT_OAEP_3072_SHA256
              - RSA_DECRYPT_OAEP_4096_SHA256
              - RSA_DECRYPT_OAEP_4096_SHA512
              - EC_SIGN_P256_SHA256
              - EC_SIGN_P384_SHA384
              enumDescriptions:
              - Not specified.
              - Creates symmetric encryption keys.
              - RSASSA-PSS 2048 bit key with a SHA256 digest.
              - RSASSA-PSS 3072 bit key with a SHA256 digest.
              - RSASSA-PSS 4096 bit key with a SHA256 digest.
              - RSASSA-PSS 4096 bit key with a SHA512 digest.
              - RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.
              - RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.
              - RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.
              - RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.
              - RSAES-OAEP 2048 bit key with a SHA256 digest.
              - RSAES-OAEP 3072 bit key with a SHA256 digest.
              - RSAES-OAEP 4096 bit key with a SHA256 digest.
              - RSAES-OAEP 4096 bit key with a SHA512 digest.
              - ECDSA on the NIST P-256 curve with a SHA256 digest.
              - ECDSA on the NIST P-384 curve with a SHA384 digest.
              type: string
            protectionLevel:
              description: |-
                ProtectionLevel to use when creating a CryptoKeyVersion based on
                this template. Immutable. Defaults to SOFTWARE.
              enum:
              - PROTECTION_LEVEL_UNSPECIFIED
              - SOFTWARE
              - HSM
              enumDescriptions:
              - Not specified.
              - Crypto operations are performed in software.
              - Crypto operations are performed in a Hardware Security Module.
              type: string
          type: object
        KeyOperationAttestation:
          description: |-
            Contains an HSM-generated attestation about a key operation. For more
            information, see [Verifying attestations]
            (https://cloud.google.com/kms/docs/attest-key).
          id: KeyOperationAttestation
          properties:
            content:
              description: |-
                Output only. The attestation data provided by the HSM when the key
                operation was performed.
              format: byte
              type: string
          type: object
    output:
      $schema: http://json-schema.org/draft-03/schema#
      mainSchema:
        $ref: '#/schemas/CryptoKey'
      methodName: get
      schemas:
        CryptoKey:
          description: |-
            A CryptoKey represents a logical key that can be used for cryptographic
            operations.

            A CryptoKey is made up of one or more versions, which
            represent the actual key material used in cryptographic operations.
          id: CryptoKey
          properties:
            createTime:
              description: Output only. The time at which this CryptoKey was created.
              format: google-datetime
              type: string
            labels:
              additionalProperties:
                type: string
              description: |-
                Labels with user-defined metadata. For more information, see
                [Labeling Keys](/kms/docs/labeling-keys).
              type: object
            name:
              description: |-
                Output only. The resource name for this CryptoKey in the format
                `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
              type: string
            nextRotationTime:
              description: |-
                At next_rotation_time, the Key Management Service will automatically:

                1. Create a new version of this CryptoKey.
                2. Mark the new version as primary.

                Key rotations performed manually via
                CreateCryptoKeyVersion and
                UpdateCryptoKeyPrimaryVersion
                do not affect next_rotation_time.

                Keys with purpose
                ENCRYPT_DECRYPT support
                automatic rotation. For other keys, this field must be omitted.
              format: google-datetime
              type: string
            primary:
              $ref: '#/schemas/CryptoKeyVersion'
              description: |-
                Output only. A copy of the "primary" CryptoKeyVersion that will be used
                by Encrypt when this CryptoKey is given
                in EncryptRequest.name.

                The CryptoKey's primary version can be updated via
                UpdateCryptoKeyPrimaryVersion.

                All keys with purpose
                ENCRYPT_DECRYPT have a
                primary. For other keys, this field will be omitted.
            purpose:
              description: The immutable purpose of this CryptoKey.
              enum:
              - CRYPTO_KEY_PURPOSE_UNSPECIFIED
              - ENCRYPT_DECRYPT
              - ASYMMETRIC_SIGN
              - ASYMMETRIC_DECRYPT
              enumDescriptions:
              - Not specified.
              - |-
                CryptoKeys with this purpose may be used with
                Encrypt and
                Decrypt.
              - |-
                CryptoKeys with this purpose may be used with
                AsymmetricSign and
                GetPublicKey.
              - |-
                CryptoKeys with this purpose may be used with
                AsymmetricDecrypt and
                GetPublicKey.
              type: string
            rotationPeriod:
              description: |-
                next_rotation_time will be advanced by this period when the service
                automatically rotates a key. Must be at least 24 hours and at most
                876,000 hours.

                If rotation_period is set, next_rotation_time must also be set.

                Keys with purpose
                ENCRYPT_DECRYPT support
                automatic rotation. For other keys, this field must be omitted.
              format: google-duration
              type: string
            versionTemplate:
              $ref: '#/schemas/CryptoKeyVersionTemplate'
              description: |-
                A template describing settings for new CryptoKeyVersion instances.
                The properties of new CryptoKeyVersion instances created by either
                CreateCryptoKeyVersion or
                auto-rotation are controlled by this template.
          type: object
        CryptoKeyVersion:
          description: |-
            A CryptoKeyVersion represents an individual cryptographic key, and the
            associated key material.

            An ENABLED version can be
            used for cryptographic operations.

            For security reasons, the raw cryptographic key material represented by a
            CryptoKeyVersion can never be viewed or exported. It can only be used to
            encrypt, decrypt, or sign data when an authorized user or application invokes
            Cloud KMS.
          id: CryptoKeyVersion
          properties:
            algorithm:
              description: |-
                Output only. The CryptoKeyVersionAlgorithm that this
                CryptoKeyVersion supports.
              enum:
              - CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED
              - GOOGLE_SYMMETRIC_ENCRYPTION
              - RSA_SIGN_PSS_2048_SHA256
              - RSA_SIGN_PSS_3072_SHA256
              - RSA_SIGN_PSS_4096_SHA256
              - RSA_SIGN_PSS_4096_SHA512
              - RSA_SIGN_PKCS1_2048_SHA256
              - RSA_SIGN_PKCS1_3072_SHA256
              - RSA_SIGN_PKCS1_4096_SHA256
              - RSA_SIGN_PKCS1_4096_SHA512
              - RSA_DECRYPT_OAEP_2048_SHA256
              - RSA_DECRYPT_OAEP_3072_SHA256
              - RSA_DECRYPT_OAEP_4096_SHA256
              - RSA_DECRYPT_OAEP_4096_SHA512
              - EC_SIGN_P256_SHA256
              - EC_SIGN_P384_SHA384
              enumDescriptions:
              - Not specified.
              - Creates symmetric encryption keys.
              - RSASSA-PSS 2048 bit key with a SHA256 digest.
              - RSASSA-PSS 3072 bit key with a SHA256 digest.
              - RSASSA-PSS 4096 bit key with a SHA256 digest.
              - RSASSA-PSS 4096 bit key with a SHA512 digest.
              - RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.
              - RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.
              - RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.
              - RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.
              - RSAES-OAEP 2048 bit key with a SHA256 digest.
              - RSAES-OAEP 3072 bit key with a SHA256 digest.
              - RSAES-OAEP 4096 bit key with a SHA256 digest.
              - RSAES-OAEP 4096 bit key with a SHA512 digest.
              - ECDSA on the NIST P-256 curve with a SHA256 digest.
              - ECDSA on the NIST P-384 curve with a SHA384 digest.
              type: string
            attestation:
              $ref: '#/schemas/KeyOperationAttestation'
              description: |-
                Output only. Statement that was generated and signed by the HSM at key
                creation time. Use this statement to verify attributes of the key as stored
                on the HSM, independently of Google. Only provided for key versions with
                protection_level HSM.
            createTime:
              description: Output only. The time at which this CryptoKeyVersion was
                created.
              format: google-datetime
              type: string
            destroyEventTime:
              description: |-
                Output only. The time this CryptoKeyVersion's key material was
                destroyed. Only present if state is
                DESTROYED.
              format: google-datetime
              type: string
            destroyTime:
              description: |-
                Output only. The time this CryptoKeyVersion's key material is scheduled
                for destruction. Only present if state is
                DESTROY_SCHEDULED.
              format: google-datetime
              type: string
            generateTime:
              description: |-
                Output only. The time this CryptoKeyVersion's key material was
                generated.
              format: google-datetime
              type: string
            importFailureReason:
              description: |-
                Output only. The root cause of an import failure. Only present if
                state is
                IMPORT_FAILED.
              type: string
            importJob:
              description: |-
                Output only. The name of the ImportJob used to import this
                CryptoKeyVersion. Only present if the underlying key material was
                imported.
              type: string
            importTime:
              description: |-
                Output only. The time at which this CryptoKeyVersion's key material
                was imported.
              format: google-datetime
              type: string
            name:
              description: |-
                Output only. The resource name for this CryptoKeyVersion in the format
                `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.
              type: string
            protectionLevel:
              description: |-
                Output only. The ProtectionLevel describing how crypto operations are
                performed with this CryptoKeyVersion.
              enum:
              - PROTECTION_LEVEL_UNSPECIFIED
              - SOFTWARE
              - HSM
              enumDescriptions:
              - Not specified.
              - Crypto operations are performed in software.
              - Crypto operations are performed in a Hardware Security Module.
              type: string
            state:
              description: The current state of the CryptoKeyVersion.
              enum:
              - CRYPTO_KEY_VERSION_STATE_UNSPECIFIED
              - PENDING_GENERATION
              - ENABLED
              - DISABLED
              - DESTROYED
              - DESTROY_SCHEDULED
              - PENDING_IMPORT
              - IMPORT_FAILED
              enumDescriptions:
              - Not specified.
              - |-
                This version is still being generated. It may not be used, enabled,
                disabled, or destroyed yet. Cloud KMS will automatically mark this
                version ENABLED as soon as the version is ready.
              - This version may be used for cryptographic operations.
              - |-
                This version may not be used, but the key material is still available,
                and the version can be placed back into the ENABLED state.
              - |-
                This version is destroyed, and the key material is no longer stored.
                A version may not leave this state once entered.
              - |-
                This version is scheduled for destruction, and will be destroyed soon.
                Call
                RestoreCryptoKeyVersion
                to put it back into the DISABLED state.
              - |-
                This version is still being imported. It may not be used, enabled,
                disabled, or destroyed yet. Cloud KMS will automatically mark this
                version ENABLED as soon as the version is ready.
              - |-
                This version was not imported successfully. It may not be used, enabled,
                disabled, or destroyed. The submitted key material has been discarded.
                Additional details can be found in
                CryptoKeyVersion.import_failure_reason.
              type: string
          type: object
        CryptoKeyVersionTemplate:
          description: |-
            A CryptoKeyVersionTemplate specifies the properties to use when creating
            a new CryptoKeyVersion, either manually with
            CreateCryptoKeyVersion or
            automatically as a result of auto-rotation.
          id: CryptoKeyVersionTemplate
          properties:
            algorithm:
              description: |-
                Required. Algorithm to use
                when creating a CryptoKeyVersion based on this template.

                For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is implied if both
                this field is omitted and CryptoKey.purpose is
                ENCRYPT_DECRYPT.
              enum:
              - CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED
              - GOOGLE_SYMMETRIC_ENCRYPTION
              - RSA_SIGN_PSS_2048_SHA256
              - RSA_SIGN_PSS_3072_SHA256
              - RSA_SIGN_PSS_4096_SHA256
              - RSA_SIGN_PSS_4096_SHA512
              - RSA_SIGN_PKCS1_2048_SHA256
              - RSA_SIGN_PKCS1_3072_SHA256
              - RSA_SIGN_PKCS1_4096_SHA256
              - RSA_SIGN_PKCS1_4096_SHA512
              - RSA_DECRYPT_OAEP_2048_SHA256
              - RSA_DECRYPT_OAEP_3072_SHA256
              - RSA_DECRYPT_OAEP_4096_SHA256
              - RSA_DECRYPT_OAEP_4096_SHA512
              - EC_SIGN_P256_SHA256
              - EC_SIGN_P384_SHA384
              enumDescriptions:
              - Not specified.
              - Creates symmetric encryption keys.
              - RSASSA-PSS 2048 bit key with a SHA256 digest.
              - RSASSA-PSS 3072 bit key with a SHA256 digest.
              - RSASSA-PSS 4096 bit key with a SHA256 digest.
              - RSASSA-PSS 4096 bit key with a SHA512 digest.
              - RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.
              - RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.
              - RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.
              - RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.
              - RSAES-OAEP 2048 bit key with a SHA256 digest.
              - RSAES-OAEP 3072 bit key with a SHA256 digest.
              - RSAES-OAEP 4096 bit key with a SHA256 digest.
              - RSAES-OAEP 4096 bit key with a SHA512 digest.
              - ECDSA on the NIST P-256 curve with a SHA256 digest.
              - ECDSA on the NIST P-384 curve with a SHA384 digest.
              type: string
            protectionLevel:
              description: |-
                ProtectionLevel to use when creating a CryptoKeyVersion based on
                this template. Immutable. Defaults to SOFTWARE.
              enum:
              - PROTECTION_LEVEL_UNSPECIFIED
              - SOFTWARE
              - HSM
              enumDescriptions:
              - Not specified.
              - Crypto operations are performed in software.
              - Crypto operations are performed in a Hardware Security Module.
              type: string
          type: object
        KeyOperationAttestation:
          description: |-
            Contains an HSM-generated attestation about a key operation. For more
            information, see [Verifying attestations]
            (https://cloud.google.com/kms/docs/attest-key).
          id: KeyOperationAttestation
          properties:
            content:
              description: |-
                Output only. The attestation data provided by the HSM when the key
                operation was performed.
              format: byte
              type: string
            format:
              description: Output only. The format of the attestation data.
              enum:
              - ATTESTATION_FORMAT_UNSPECIFIED
              - CAVIUM_V1_COMPRESSED
              - CAVIUM_V2_COMPRESSED
              enumDescriptions:
              - Not specified.
              - |-
                Cavium HSM attestation compressed with gzip. Note that this format is
                defined by Cavium and subject to change at any time.
              - |-
                Cavium HSM attestation V2 compressed with gzip. This is a new format
                introduced in Cavium's version 3.2-08.
              type: string
          type: object
  selfLink: https://www.googleapis.com/deploymentmanager/v2beta/projects/gcp-types/global/typeProviders/cloudkms-v1/types/projects.locations.keyRings.cryptoKeys?alt=json
  title: Cloud Key Management Service (KMS) API
