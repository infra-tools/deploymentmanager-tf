type_info:
  documentationLink: https://cloud.google.com/bigtable/
  kind: deploymentmanager#typeInfo
  name: projects.instances.tables
  schema:
    input:
      $schema: http://json-schema.org/draft-03/schema#
      create:
        properties:
          initialSplits:
            description: |-
              The optional list of row keys that will be used to initially split the
              table into several tablets (tablets are similar to HBase regions).
              Given two split keys, `s1` and `s2`, three tablets will be created,
              spanning the key ranges: `[, s1), [s1, s2), [s2, )`.

              Example:

              * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
                             `"other", "zz"]`
              * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
              * Key assignment:
                  - Tablet 1 `[, apple)                => {"a"}.`
                  - Tablet 2 `[apple, customer_1)      => {"apple", "custom"}.`
                  - Tablet 3 `[customer_1, customer_2) => {"customer_1"}.`
                  - Tablet 4 `[customer_2, other)      => {"customer_2"}.`
                  - Tablet 5 `[other, )                => {"other", "zz"}.`
            items:
              $ref: '#/schemas/Split'
            type: array
          parent:
            description: |-
              The unique name of the instance in which to create the table.
              Values are of the form `projects/<project>/instances/<instance>`.
            location: path
            pattern: ^projects/[^/]+/instances/[^/]+$
            required: true
            type: string
          table:
            $ref: '#/schemas/Table'
            description: The Table to create.
          tableId:
            description: |-
              The name by which the new table should be referred to within the parent
              instance, e.g., `foobar` rather than `<parent>/tables/foobar`.
              Maximum 50 characters.
            type: string
        type: object
      methodName: create
      schemas:
        ClusterState:
          description: The state of a table's data in a particular cluster.
          id: ClusterState
          properties:
            replicationState:
              description: |-
                Output only.
                The state of replication for the table in this cluster.
              enum:
              - STATE_NOT_KNOWN
              - INITIALIZING
              - PLANNED_MAINTENANCE
              - UNPLANNED_MAINTENANCE
              - READY
              enumDescriptions:
              - The replication state of the table is unknown in this cluster.
              - |-
                The cluster was recently created, and the table must finish copying
                over pre-existing data from other clusters before it can begin
                receiving live replication updates and serving Data API requests.
              - |-
                The table is temporarily unable to serve Data API requests from this
                cluster due to planned internal maintenance.
              - |-
                The table is temporarily unable to serve Data API requests from this
                cluster due to unplanned or emergency maintenance.
              - |-
                The table can serve Data API requests from this cluster. Depending on
                replication delay, reads may not immediately reflect the state of the
                table in other clusters.
              type: string
          type: object
        ColumnFamily:
          description: A set of columns within a table which share a common configuration.
          id: ColumnFamily
          properties:
            gcRule:
              $ref: '#/schemas/GcRule'
              description: |-
                Garbage collection rule specified as a protobuf.
                Must serialize to at most 500 bytes.

                NOTE: Garbage collection executes opportunistically in the background, and
                so it's possible for reads to return a cell even if it matches the active
                GC expression for its family.
          type: object
        CreateTableRequest:
          description: |-
            Request message for
            google.bigtable.admin.v2.BigtableTableAdmin.CreateTable
          id: CreateTableRequest
          properties:
            initialSplits:
              description: |-
                The optional list of row keys that will be used to initially split the
                table into several tablets (tablets are similar to HBase regions).
                Given two split keys, `s1` and `s2`, three tablets will be created,
                spanning the key ranges: `[, s1), [s1, s2), [s2, )`.

                Example:

                * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
                               `"other", "zz"]`
                * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
                * Key assignment:
                    - Tablet 1 `[, apple)                => {"a"}.`
                    - Tablet 2 `[apple, customer_1)      => {"apple", "custom"}.`
                    - Tablet 3 `[customer_1, customer_2) => {"customer_1"}.`
                    - Tablet 4 `[customer_2, other)      => {"customer_2"}.`
                    - Tablet 5 `[other, )                => {"other", "zz"}.`
              items:
                $ref: '#/schemas/Split'
              type: array
            table:
              $ref: '#/schemas/Table'
              description: The Table to create.
            tableId:
              description: |-
                The name by which the new table should be referred to within the parent
                instance, e.g., `foobar` rather than `<parent>/tables/foobar`.
                Maximum 50 characters.
              type: string
          type: object
        GcRule:
          description: Rule for determining which cells to delete during garbage collection.
          id: GcRule
          properties:
            intersection:
              $ref: '#/schemas/Intersection'
              description: Delete cells that would be deleted by every nested rule.
            maxAge:
              description: |-
                Delete cells in a column older than the given age.
                Values must be at least one millisecond, and will be truncated to
                microsecond granularity.
              format: google-duration
              type: string
            maxNumVersions:
              description: Delete all cells in a column except the most recent N.
              format: int32
              type: integer
            union:
              $ref: '#/schemas/Union'
              description: Delete cells that would be deleted by any nested rule.
          type: object
        Intersection:
          description: A GcRule which deletes cells matching all of the given rules.
          id: Intersection
          properties:
            rules:
              description: Only delete cells which would be deleted by every element
                of `rules`.
              items:
                $ref: '#/schemas/GcRule'
              type: array
          type: object
        Split:
          description: An initial split point for a newly created table.
          id: Split
          properties:
            key:
              description: Row key to use as an initial tablet boundary.
              format: byte
              type: string
          type: object
        Table:
          description: |-
            A collection of user data indexed by row, column, and timestamp.
            Each table is served using the resources of its parent cluster.
          id: Table
          properties:
            clusterStates:
              additionalProperties:
                $ref: '#/schemas/ClusterState'
              description: |-
                Output only.
                Map from cluster ID to per-cluster table state.
                If it could not be determined whether or not the table has data in a
                particular cluster (for example, if its zone is unavailable), then
                there will be an entry for the cluster with UNKNOWN `replication_status`.
                Views: `REPLICATION_VIEW`, `FULL`
              type: object
            columnFamilies:
              additionalProperties:
                $ref: '#/schemas/ColumnFamily'
              description: |-
                (`CreationOnly`)
                The column families configured for this table, mapped by column family ID.
                Views: `SCHEMA_VIEW`, `FULL`
              type: object
            granularity:
              description: |-
                (`CreationOnly`)
                The granularity (i.e. `MILLIS`) at which timestamps are stored in
                this table. Timestamps not matching the granularity will be rejected.
                If unspecified at creation time, the value will be set to `MILLIS`.
                Views: `SCHEMA_VIEW`, `FULL`.
              enum:
              - TIMESTAMP_GRANULARITY_UNSPECIFIED
              - MILLIS
              enumDescriptions:
              - |-
                The user did not specify a granularity. Should not be returned.
                When specified during table creation, MILLIS will be used.
              - The table keeps data versioned at a granularity of 1ms.
              type: string
            name:
              description: |-
                Output only.
                The unique name of the table. Values are of the form
                `projects/<project>/instances/<instance>/tables/_a-zA-Z0-9*`.
                Views: `NAME_ONLY`, `SCHEMA_VIEW`, `REPLICATION_VIEW`, `FULL`
              type: string
          type: object
        Union:
          description: A GcRule which deletes cells matching any of the given rules.
          id: Union
          properties:
            rules:
              description: Delete cells which would be deleted by any element of `rules`.
              items:
                $ref: '#/schemas/GcRule'
              type: array
          type: object
    output:
      $schema: http://json-schema.org/draft-03/schema#
      mainSchema:
        $ref: '#/schemas/Table'
      methodName: get
      schemas:
        ClusterState:
          description: The state of a table's data in a particular cluster.
          id: ClusterState
          properties:
            replicationState:
              description: |-
                Output only.
                The state of replication for the table in this cluster.
              enum:
              - STATE_NOT_KNOWN
              - INITIALIZING
              - PLANNED_MAINTENANCE
              - UNPLANNED_MAINTENANCE
              - READY
              enumDescriptions:
              - The replication state of the table is unknown in this cluster.
              - |-
                The cluster was recently created, and the table must finish copying
                over pre-existing data from other clusters before it can begin
                receiving live replication updates and serving Data API requests.
              - |-
                The table is temporarily unable to serve Data API requests from this
                cluster due to planned internal maintenance.
              - |-
                The table is temporarily unable to serve Data API requests from this
                cluster due to unplanned or emergency maintenance.
              - |-
                The table can serve Data API requests from this cluster. Depending on
                replication delay, reads may not immediately reflect the state of the
                table in other clusters.
              type: string
          type: object
        ColumnFamily:
          description: A set of columns within a table which share a common configuration.
          id: ColumnFamily
          properties:
            gcRule:
              $ref: '#/schemas/GcRule'
              description: |-
                Garbage collection rule specified as a protobuf.
                Must serialize to at most 500 bytes.

                NOTE: Garbage collection executes opportunistically in the background, and
                so it's possible for reads to return a cell even if it matches the active
                GC expression for its family.
          type: object
        GcRule:
          description: Rule for determining which cells to delete during garbage collection.
          id: GcRule
          properties:
            intersection:
              $ref: '#/schemas/Intersection'
              description: Delete cells that would be deleted by every nested rule.
            maxAge:
              description: |-
                Delete cells in a column older than the given age.
                Values must be at least one millisecond, and will be truncated to
                microsecond granularity.
              format: google-duration
              type: string
            maxNumVersions:
              description: Delete all cells in a column except the most recent N.
              format: int32
              type: integer
            union:
              $ref: '#/schemas/Union'
              description: Delete cells that would be deleted by any nested rule.
          type: object
        Intersection:
          description: A GcRule which deletes cells matching all of the given rules.
          id: Intersection
          properties:
            rules:
              description: Only delete cells which would be deleted by every element
                of `rules`.
              items:
                $ref: '#/schemas/GcRule'
              type: array
          type: object
        Table:
          description: |-
            A collection of user data indexed by row, column, and timestamp.
            Each table is served using the resources of its parent cluster.
          id: Table
          properties:
            clusterStates:
              additionalProperties:
                $ref: '#/schemas/ClusterState'
              description: |-
                Output only.
                Map from cluster ID to per-cluster table state.
                If it could not be determined whether or not the table has data in a
                particular cluster (for example, if its zone is unavailable), then
                there will be an entry for the cluster with UNKNOWN `replication_status`.
                Views: `REPLICATION_VIEW`, `FULL`
              type: object
            columnFamilies:
              additionalProperties:
                $ref: '#/schemas/ColumnFamily'
              description: |-
                (`CreationOnly`)
                The column families configured for this table, mapped by column family ID.
                Views: `SCHEMA_VIEW`, `FULL`
              type: object
            granularity:
              description: |-
                (`CreationOnly`)
                The granularity (i.e. `MILLIS`) at which timestamps are stored in
                this table. Timestamps not matching the granularity will be rejected.
                If unspecified at creation time, the value will be set to `MILLIS`.
                Views: `SCHEMA_VIEW`, `FULL`.
              enum:
              - TIMESTAMP_GRANULARITY_UNSPECIFIED
              - MILLIS
              enumDescriptions:
              - |-
                The user did not specify a granularity. Should not be returned.
                When specified during table creation, MILLIS will be used.
              - The table keeps data versioned at a granularity of 1ms.
              type: string
            name:
              description: |-
                Output only.
                The unique name of the table. Values are of the form
                `projects/<project>/instances/<instance>/tables/_a-zA-Z0-9*`.
                Views: `NAME_ONLY`, `SCHEMA_VIEW`, `REPLICATION_VIEW`, `FULL`
              type: string
          type: object
        Union:
          description: A GcRule which deletes cells matching any of the given rules.
          id: Union
          properties:
            rules:
              description: Delete cells which would be deleted by any element of `rules`.
              items:
                $ref: '#/schemas/GcRule'
              type: array
          type: object
  selfLink: https://www.googleapis.com/deploymentmanager/v2beta/projects/gcp-types/global/typeProviders/bigtableadmin-v2/types/projects.instances.tables?alt=json
  title: Cloud Bigtable Admin API
