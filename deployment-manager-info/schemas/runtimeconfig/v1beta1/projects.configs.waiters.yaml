type_info:
  documentationLink: https://cloud.google.com/deployment-manager/runtime-configurator/
  kind: deploymentmanager#typeInfo
  name: projects.configs.waiters
  schema:
    input:
      $schema: http://json-schema.org/draft-03/schema#
      create:
        properties:
          createTime:
            description: |-
              Output only. The instant at which this Waiter resource was created. Adding
              the value of `timeout` to this instant yields the timeout deadline for the
              waiter.
            format: google-datetime
            type: string
          done:
            description: |-
              Output only. If the value is `false`, it means the waiter is still waiting
              for one of its conditions to be met.

              If true, the waiter has finished. If the waiter finished due to a timeout
              or failure, `error` will be set.
            type: boolean
          error:
            $ref: '#/schemas/Status'
            description: |-
              Output only. If the waiter ended due to a failure or timeout, this value
              will be set.
          failure:
            $ref: '#/schemas/EndCondition'
            description: |-
              [Optional] The failure condition of this waiter. If this condition is met,
              `done` will be set to `true` and the `error` code will be set to `ABORTED`.
              The failure condition takes precedence over the success condition. If both
              conditions are met, a failure will be indicated. This value is optional; if
              no failure condition is set, the only failure scenario will be a timeout.
          name:
            description: |-
              The name of the Waiter resource, in the format:

                  projects/[PROJECT_ID]/configs/[CONFIG_NAME]/waiters/[WAITER_NAME]

              The `[PROJECT_ID]` must be a valid Google Cloud project ID,
              the `[CONFIG_NAME]` must be a valid RuntimeConfig resource, the
              `[WAITER_NAME]` must match RFC 1035 segment specification, and the length
              of `[WAITER_NAME]` must be less than 64 bytes.

              After you create a Waiter resource, you cannot change the resource name.
            type: string
          parent:
            description: |-
              The path to the configuration that will own the waiter.
              The configuration must exist beforehand; the path must be in the format:

              `projects/[PROJECT_ID]/configs/[CONFIG_NAME]`.
            location: path
            pattern: ^projects/[^/]+/configs/[^/]+$
            required: true
            type: string
          requestId:
            description: |-
              An optional but recommended unique `request_id`. If the server
              receives two `create()` requests  with the same
              `request_id`, then the second request will be ignored and the
              first resource created and stored in the backend is returned.
              Empty `request_id` fields are ignored.

              It is responsibility of the client to ensure uniqueness of the
              `request_id` strings.

              `request_id` strings are limited to 64 characters.
            location: query
            type: string
          success:
            $ref: '#/schemas/EndCondition'
            description: |-
              [Required] The success condition. If this condition is met, `done` will be
              set to `true` and the `error` value will remain unset. The failure
              condition takes precedence over the success condition. If both conditions
              are met, a failure will be indicated.
          timeout:
            description: |-
              [Required] Specifies the timeout of the waiter in seconds, beginning from
              the instant that `waiters().create` method is called. If this time elapses
              before the success or failure conditions are met, the waiter fails and sets
              the `error` code to `DEADLINE_EXCEEDED`.
            format: google-duration
            type: string
        type: object
      methodName: create
      schemas:
        Cardinality:
          description: |-
            A Cardinality condition for the Waiter resource. A cardinality condition is
            met when the number of variables under a specified path prefix reaches a
            predefined number. For example, if you set a Cardinality condition where
            the `path` is set to `/foo` and the number of paths is set to `2`, the
            following variables would meet the condition in a RuntimeConfig resource:

            + `/foo/variable1 = "value1"`
            + `/foo/variable2 = "value2"`
            + `/bar/variable3 = "value3"`

            It would not satisfy the same condition with the `number` set to
            `3`, however, because there is only 2 paths that start with `/foo`.
            Cardinality conditions are recursive; all subtrees under the specific
            path prefix are counted.
          id: Cardinality
          properties:
            number:
              description: |-
                The number variables under the `path` that must exist to meet this
                condition. Defaults to 1 if not specified.
              format: int32
              type: integer
            path:
              description: The root of the variable subtree to monitor. For example,
                `/foo`.
              type: string
          type: object
        EndCondition:
          description: The condition that a Waiter resource is waiting for.
          id: EndCondition
          properties:
            cardinality:
              $ref: '#/schemas/Cardinality'
              description: The cardinality of the `EndCondition`.
          type: object
        Status:
          description: |-
            The `Status` type defines a logical error model that is suitable for
            different programming environments, including REST APIs and RPC APIs. It is
            used by [gRPC](https://github.com/grpc). Each `Status` message contains
            three pieces of data: error code, error message, and error details.

            You can find out more about this error model and how to work with it in the
            [API Design Guide](https://cloud.google.com/apis/design/errors).
          id: Status
          properties:
            code:
              description: The status code, which should be an enum value of google.rpc.Code.
              format: int32
              type: integer
            details:
              description: |-
                A list of messages that carry the error details.  There is a common set of
                message types for APIs to use.
              items:
                additionalProperties:
                  description: Properties of the object. Contains field @type with
                    type URL.
                  type: any
                type: object
              type: array
            message:
              description: |-
                A developer-facing error message, which should be in English. Any
                user-facing error message should be localized and sent in the
                google.rpc.Status.details field, or localized by the client.
              type: string
          type: object
        Waiter:
          description: |-
            A Waiter resource waits for some end condition within a RuntimeConfig
            resource to be met before it returns. For example, assume you have a
            distributed system where each node writes to a Variable resource indicating
            the node's readiness as part of the startup process.

            You then configure a Waiter resource with the success condition set to wait
            until some number of nodes have checked in. Afterwards, your application
            runs some arbitrary code after the condition has been met and the waiter
            returns successfully.

            Once created, a Waiter resource is immutable.

            To learn more about using waiters, read the
            [Creating a
            Waiter](/deployment-manager/runtime-configurator/creating-a-waiter)
            documentation.
          id: Waiter
          properties:
            createTime:
              description: |-
                Output only. The instant at which this Waiter resource was created. Adding
                the value of `timeout` to this instant yields the timeout deadline for the
                waiter.
              format: google-datetime
              type: string
            done:
              description: |-
                Output only. If the value is `false`, it means the waiter is still waiting
                for one of its conditions to be met.

                If true, the waiter has finished. If the waiter finished due to a timeout
                or failure, `error` will be set.
              type: boolean
            error:
              $ref: '#/schemas/Status'
              description: |-
                Output only. If the waiter ended due to a failure or timeout, this value
                will be set.
            failure:
              $ref: '#/schemas/EndCondition'
              description: |-
                [Optional] The failure condition of this waiter. If this condition is met,
                `done` will be set to `true` and the `error` code will be set to `ABORTED`.
                The failure condition takes precedence over the success condition. If both
                conditions are met, a failure will be indicated. This value is optional; if
                no failure condition is set, the only failure scenario will be a timeout.
            name:
              description: |-
                The name of the Waiter resource, in the format:

                    projects/[PROJECT_ID]/configs/[CONFIG_NAME]/waiters/[WAITER_NAME]

                The `[PROJECT_ID]` must be a valid Google Cloud project ID,
                the `[CONFIG_NAME]` must be a valid RuntimeConfig resource, the
                `[WAITER_NAME]` must match RFC 1035 segment specification, and the length
                of `[WAITER_NAME]` must be less than 64 bytes.

                After you create a Waiter resource, you cannot change the resource name.
              type: string
            success:
              $ref: '#/schemas/EndCondition'
              description: |-
                [Required] The success condition. If this condition is met, `done` will be
                set to `true` and the `error` value will remain unset. The failure
                condition takes precedence over the success condition. If both conditions
                are met, a failure will be indicated.
            timeout:
              description: |-
                [Required] Specifies the timeout of the waiter in seconds, beginning from
                the instant that `waiters().create` method is called. If this time elapses
                before the success or failure conditions are met, the waiter fails and sets
                the `error` code to `DEADLINE_EXCEEDED`.
              format: google-duration
              type: string
          type: object
    output:
      $schema: http://json-schema.org/draft-03/schema#
      mainSchema:
        $ref: '#/schemas/Waiter'
      methodName: get
      schemas:
        Cardinality:
          description: |-
            A Cardinality condition for the Waiter resource. A cardinality condition is
            met when the number of variables under a specified path prefix reaches a
            predefined number. For example, if you set a Cardinality condition where
            the `path` is set to `/foo` and the number of paths is set to `2`, the
            following variables would meet the condition in a RuntimeConfig resource:

            + `/foo/variable1 = "value1"`
            + `/foo/variable2 = "value2"`
            + `/bar/variable3 = "value3"`

            It would not satisfy the same condition with the `number` set to
            `3`, however, because there is only 2 paths that start with `/foo`.
            Cardinality conditions are recursive; all subtrees under the specific
            path prefix are counted.
          id: Cardinality
          properties:
            number:
              description: |-
                The number variables under the `path` that must exist to meet this
                condition. Defaults to 1 if not specified.
              format: int32
              type: integer
            path:
              description: The root of the variable subtree to monitor. For example,
                `/foo`.
              type: string
          type: object
        EndCondition:
          description: The condition that a Waiter resource is waiting for.
          id: EndCondition
          properties:
            cardinality:
              $ref: '#/schemas/Cardinality'
              description: The cardinality of the `EndCondition`.
          type: object
        Status:
          description: |-
            The `Status` type defines a logical error model that is suitable for
            different programming environments, including REST APIs and RPC APIs. It is
            used by [gRPC](https://github.com/grpc). Each `Status` message contains
            three pieces of data: error code, error message, and error details.

            You can find out more about this error model and how to work with it in the
            [API Design Guide](https://cloud.google.com/apis/design/errors).
          id: Status
          properties:
            code:
              description: The status code, which should be an enum value of google.rpc.Code.
              format: int32
              type: integer
            details:
              description: |-
                A list of messages that carry the error details.  There is a common set of
                message types for APIs to use.
              items:
                additionalProperties:
                  description: Properties of the object. Contains field @type with
                    type URL.
                  type: any
                type: object
              type: array
            message:
              description: |-
                A developer-facing error message, which should be in English. Any
                user-facing error message should be localized and sent in the
                google.rpc.Status.details field, or localized by the client.
              type: string
          type: object
        Waiter:
          description: |-
            A Waiter resource waits for some end condition within a RuntimeConfig
            resource to be met before it returns. For example, assume you have a
            distributed system where each node writes to a Variable resource indicating
            the node's readiness as part of the startup process.

            You then configure a Waiter resource with the success condition set to wait
            until some number of nodes have checked in. Afterwards, your application
            runs some arbitrary code after the condition has been met and the waiter
            returns successfully.

            Once created, a Waiter resource is immutable.

            To learn more about using waiters, read the
            [Creating a
            Waiter](/deployment-manager/runtime-configurator/creating-a-waiter)
            documentation.
          id: Waiter
          properties:
            createTime:
              description: |-
                Output only. The instant at which this Waiter resource was created. Adding
                the value of `timeout` to this instant yields the timeout deadline for the
                waiter.
              format: google-datetime
              type: string
            done:
              description: |-
                Output only. If the value is `false`, it means the waiter is still waiting
                for one of its conditions to be met.

                If true, the waiter has finished. If the waiter finished due to a timeout
                or failure, `error` will be set.
              type: boolean
            error:
              $ref: '#/schemas/Status'
              description: |-
                Output only. If the waiter ended due to a failure or timeout, this value
                will be set.
            failure:
              $ref: '#/schemas/EndCondition'
              description: |-
                [Optional] The failure condition of this waiter. If this condition is met,
                `done` will be set to `true` and the `error` code will be set to `ABORTED`.
                The failure condition takes precedence over the success condition. If both
                conditions are met, a failure will be indicated. This value is optional; if
                no failure condition is set, the only failure scenario will be a timeout.
            name:
              description: |-
                The name of the Waiter resource, in the format:

                    projects/[PROJECT_ID]/configs/[CONFIG_NAME]/waiters/[WAITER_NAME]

                The `[PROJECT_ID]` must be a valid Google Cloud project ID,
                the `[CONFIG_NAME]` must be a valid RuntimeConfig resource, the
                `[WAITER_NAME]` must match RFC 1035 segment specification, and the length
                of `[WAITER_NAME]` must be less than 64 bytes.

                After you create a Waiter resource, you cannot change the resource name.
              type: string
            success:
              $ref: '#/schemas/EndCondition'
              description: |-
                [Required] The success condition. If this condition is met, `done` will be
                set to `true` and the `error` value will remain unset. The failure
                condition takes precedence over the success condition. If both conditions
                are met, a failure will be indicated.
            timeout:
              description: |-
                [Required] Specifies the timeout of the waiter in seconds, beginning from
                the instant that `waiters().create` method is called. If this time elapses
                before the success or failure conditions are met, the waiter fails and sets
                the `error` code to `DEADLINE_EXCEEDED`.
              format: google-duration
              type: string
          type: object
  selfLink: https://www.googleapis.com/deploymentmanager/v2beta/projects/gcp-types/global/typeProviders/runtimeconfig-v1beta1/types/projects.configs.waiters?alt=json
  title: Cloud Runtime Configuration API
